use super::common::run_case;
use crate::rivest97::RC5_32_12_16;

const CASES: &[&[(&str, &str, &str)]] = &[
    &[
        // set #0 vec #1
        (
            "80000000000000000000000000000000",
            "0000000000000000",
            "8F681D7F285CDC2F",
        ),
        // set #0 vec #2
        (
            "40000000000000000000000000000000",
            "0000000000000000",
            "DC14832CF4FE61A8",
        ),
        // set #0 vec #3
        (
            "20000000000000000000000000000000",
            "0000000000000000",
            "2F2494A0D96958E7",
        ),
        // set #0 vec #4
        (
            "10000000000000000000000000000000",
            "0000000000000000",
            "410BCDD35DA0963F",
        ),
        // set #0 vec #5
        (
            "08000000000000000000000000000000",
            "0000000000000000",
            "0C4C1EC0EA4EA260",
        ),
        // set #0 vec #6
        (
            "04000000000000000000000000000000",
            "0000000000000000",
            "3BBC9C778EDC72B3",
        ),
        // set #0 vec #7
        (
            "02000000000000000000000000000000",
            "0000000000000000",
            "06381C693372158D",
        ),
        // set #0 vec #8
        (
            "01000000000000000000000000000000",
            "0000000000000000",
            "587E3D5E4B11860B",
        ),
        // set #0 vec #9
        (
            "00800000000000000000000000000000",
            "0000000000000000",
            "D6F60736920D9319",
        ),
        // set #0 vec #10
        (
            "00400000000000000000000000000000",
            "0000000000000000",
            "2ACB30508A017C5D",
        ),
        // set #0 vec #11
        (
            "00200000000000000000000000000000",
            "0000000000000000",
            "9F1237DD5B57F140",
        ),
        // set #0 vec #12
        (
            "00100000000000000000000000000000",
            "0000000000000000",
            "A394956442AFCC43",
        ),
        // set #0 vec #13
        (
            "00080000000000000000000000000000",
            "0000000000000000",
            "F89DB895C619914B",
        ),
        // set #0 vec #14
        (
            "00040000000000000000000000000000",
            "0000000000000000",
            "F2FA3F8AD897FE55",
        ),
        // set #0 vec #15
        (
            "00020000000000000000000000000000",
            "0000000000000000",
            "37A7CF80BBA7ED28",
        ),
        // set #0 vec #16
        (
            "00010000000000000000000000000000",
            "0000000000000000",
            "B4D3613F370CDD26",
        ),
        // set #0 vec #17
        (
            "00008000000000000000000000000000",
            "0000000000000000",
            "CF6FA85F7D599EED",
        ),
        // set #0 vec #18
        (
            "00004000000000000000000000000000",
            "0000000000000000",
            "F52C5328B8B73CC2",
        ),
        // set #0 vec #19
        (
            "00002000000000000000000000000000",
            "0000000000000000",
            "655AEDB550850AF1",
        ),
        // set #0 vec #20
        (
            "00001000000000000000000000000000",
            "0000000000000000",
            "8D695A777ABC21CE",
        ),
        // set #0 vec #21
        (
            "00000800000000000000000000000000",
            "0000000000000000",
            "E493DE948CA27B44",
        ),
        // set #0 vec #22
        (
            "00000400000000000000000000000000",
            "0000000000000000",
            "929BE63E4B0BDC6D",
        ),
        // set #0 vec #23
        (
            "00000200000000000000000000000000",
            "0000000000000000",
            "72926639928E2E3B",
        ),
        // set #0 vec #24
        (
            "00000100000000000000000000000000",
            "0000000000000000",
            "A47330C510E3F48A",
        ),
        // set #0 vec #25
        (
            "00000080000000000000000000000000",
            "0000000000000000",
            "DDF4F2E1733FE495",
        ),
        // set #0 vec #26
        (
            "00000040000000000000000000000000",
            "0000000000000000",
            "C240C78F92A219B8",
        ),
        // set #0 vec #27
        (
            "00000020000000000000000000000000",
            "0000000000000000",
            "4ADC682FC6ACBFAD",
        ),
        // set #0 vec #28
        (
            "00000010000000000000000000000000",
            "0000000000000000",
            "57C7CE07E9CA2BC7",
        ),
        // set #0 vec #29
        (
            "00000008000000000000000000000000",
            "0000000000000000",
            "34470680FCD4D9CB",
        ),
        // set #0 vec #30
        (
            "00000004000000000000000000000000",
            "0000000000000000",
            "9A6FB9620B79245F",
        ),
        // set #0 vec #31
        (
            "00000002000000000000000000000000",
            "0000000000000000",
            "B275A64B37EAF914",
        ),
        // set #0 vec #32
        (
            "00000001000000000000000000000000",
            "0000000000000000",
            "AEDA56A5190042CE",
        ),
        // set #0 vec #33
        (
            "00000000800000000000000000000000",
            "0000000000000000",
            "AE861288A7D664D4",
        ),
        // set #0 vec #34
        (
            "00000000400000000000000000000000",
            "0000000000000000",
            "2C058DA9A41A2604",
        ),
        // set #0 vec #35
        (
            "00000000200000000000000000000000",
            "0000000000000000",
            "D2F4F442FB27EF3E",
        ),
        // set #0 vec #36
        (
            "00000000100000000000000000000000",
            "0000000000000000",
            "4A51C6519BA9F04E",
        ),
        // set #0 vec #37
        (
            "00000000080000000000000000000000",
            "0000000000000000",
            "638F7E9A86AC3FF6",
        ),
        // set #0 vec #38
        (
            "00000000040000000000000000000000",
            "0000000000000000",
            "AADE1A8BB1DDE268",
        ),
        // set #0 vec #39
        (
            "00000000020000000000000000000000",
            "0000000000000000",
            "0A875A87E6F2AB87",
        ),
        // set #0 vec #40
        (
            "00000000010000000000000000000000",
            "0000000000000000",
            "CDCA436661D1EDD1",
        ),
        // set #0 vec #41
        (
            "00000000008000000000000000000000",
            "0000000000000000",
            "B4BA907F4E6C3F63",
        ),
        // set #0 vec #42
        (
            "00000000004000000000000000000000",
            "0000000000000000",
            "7790DF95D2FA15CB",
        ),
        // set #0 vec #43
        (
            "00000000002000000000000000000000",
            "0000000000000000",
            "D78C795A3C2C288B",
        ),
        // set #0 vec #44
        (
            "00000000001000000000000000000000",
            "0000000000000000",
            "B491EB3DEE1A2EE2",
        ),
        // set #0 vec #45
        (
            "00000000000800000000000000000000",
            "0000000000000000",
            "E2F2146284D28F74",
        ),
        // set #0 vec #46
        (
            "00000000000400000000000000000000",
            "0000000000000000",
            "F7BB41B070148B35",
        ),
        // set #0 vec #47
        (
            "00000000000200000000000000000000",
            "0000000000000000",
            "ADB84CCAD2121BE5",
        ),
        // set #0 vec #48
        (
            "00000000000100000000000000000000",
            "0000000000000000",
            "800D7FA733B9960C",
        ),
        // set #0 vec #49
        (
            "00000000000080000000000000000000",
            "0000000000000000",
            "0FE00A54D35ED35E",
        ),
        // set #0 vec #50
        (
            "00000000000040000000000000000000",
            "0000000000000000",
            "0E53E0B6465D8895",
        ),
        // set #0 vec #51
        (
            "00000000000020000000000000000000",
            "0000000000000000",
            "01907DF00C43D69C",
        ),
        // set #0 vec #52
        (
            "00000000000010000000000000000000",
            "0000000000000000",
            "87E399F67357FEE0",
        ),
        // set #0 vec #53
        (
            "00000000000008000000000000000000",
            "0000000000000000",
            "DCBCCE80E64D7000",
        ),
        // set #0 vec #54
        (
            "00000000000004000000000000000000",
            "0000000000000000",
            "93B87003240DFF08",
        ),
        // set #0 vec #55
        (
            "00000000000002000000000000000000",
            "0000000000000000",
            "89555942AE9529CA",
        ),
        // set #0 vec #56
        (
            "00000000000001000000000000000000",
            "0000000000000000",
            "1AEB38B99495A0CB",
        ),
        // set #0 vec #57
        (
            "00000000000000800000000000000000",
            "0000000000000000",
            "5DC10990BF7FEAF3",
        ),
        // set #0 vec #58
        (
            "00000000000000400000000000000000",
            "0000000000000000",
            "5FF336E6E09E151F",
        ),
        // set #0 vec #59
        (
            "00000000000000200000000000000000",
            "0000000000000000",
            "E4867C31A53F278C",
        ),
        // set #0 vec #60
        (
            "00000000000000100000000000000000",
            "0000000000000000",
            "AE2D56B443FFBBB0",
        ),
        // set #0 vec #61
        (
            "00000000000000080000000000000000",
            "0000000000000000",
            "E4B0930CDEA092BF",
        ),
        // set #0 vec #62
        (
            "00000000000000040000000000000000",
            "0000000000000000",
            "2BD89729A3D0C3BB",
        ),
        // set #0 vec #63
        (
            "00000000000000020000000000000000",
            "0000000000000000",
            "23ED08C5F4DC6049",
        ),
        // set #0 vec #64
        (
            "00000000000000010000000000000000",
            "0000000000000000",
            "8FC62B5984577752",
        ),
        // set #0 vec #65
        (
            "00000000000000008000000000000000",
            "0000000000000000",
            "14613DCC1ABE7A39",
        ),
        // set #0 vec #66
        (
            "00000000000000004000000000000000",
            "0000000000000000",
            "5E7A901B9FDE2296",
        ),
        // set #0 vec #67
        (
            "00000000000000002000000000000000",
            "0000000000000000",
            "C4077FCD04CF4870",
        ),
        // set #0 vec #68
        (
            "00000000000000001000000000000000",
            "0000000000000000",
            "DF7BE5B6876678ED",
        ),
        // set #0 vec #69
        (
            "00000000000000000800000000000000",
            "0000000000000000",
            "5B8942F5FEA33765",
        ),
        // set #0 vec #70
        (
            "00000000000000000400000000000000",
            "0000000000000000",
            "994764B14447574B",
        ),
        // set #0 vec #71
        (
            "00000000000000000200000000000000",
            "0000000000000000",
            "F63BEA609AB9653A",
        ),
        // set #0 vec #72
        (
            "00000000000000000100000000000000",
            "0000000000000000",
            "6825EFBE4FBCB333",
        ),
        // set #0 vec #73
        (
            "00000000000000000080000000000000",
            "0000000000000000",
            "BE36BFBF6EAFD879",
        ),
        // set #0 vec #74
        (
            "00000000000000000040000000000000",
            "0000000000000000",
            "A667934F8149AF84",
        ),
        // set #0 vec #75
        (
            "00000000000000000020000000000000",
            "0000000000000000",
            "0CFE855287BE997F",
        ),
        // set #0 vec #76
        (
            "00000000000000000010000000000000",
            "0000000000000000",
            "CA0EB8DFB608C3B8",
        ),
        // set #0 vec #77
        (
            "00000000000000000008000000000000",
            "0000000000000000",
            "6B1018816D2272CD",
        ),
        // set #0 vec #78
        (
            "00000000000000000004000000000000",
            "0000000000000000",
            "B7469BCF9E90A2C4",
        ),
        // set #0 vec #79
        (
            "00000000000000000002000000000000",
            "0000000000000000",
            "48AA658A6925C013",
        ),
        // set #0 vec #80
        (
            "00000000000000000001000000000000",
            "0000000000000000",
            "D9F87504BA1C3FB3",
        ),
        // set #0 vec #81
        (
            "00000000000000000000800000000000",
            "0000000000000000",
            "172D40D4F436591C",
        ),
        // set #0 vec #82
        (
            "00000000000000000000400000000000",
            "0000000000000000",
            "6CAC2B66A306CD73",
        ),
        // set #0 vec #83
        (
            "00000000000000000000200000000000",
            "0000000000000000",
            "21D7330D53E33DE8",
        ),
        // set #0 vec #84
        (
            "00000000000000000000100000000000",
            "0000000000000000",
            "06B173283475F8E8",
        ),
        // set #0 vec #85
        (
            "00000000000000000000080000000000",
            "0000000000000000",
            "FAE2841F2E2FE143",
        ),
        // set #0 vec #86
        (
            "00000000000000000000040000000000",
            "0000000000000000",
            "A7A81A93E3ECBCD5",
        ),
        // set #0 vec #87
        (
            "00000000000000000000020000000000",
            "0000000000000000",
            "C2A5BE3EF5EC8AB3",
        ),
        // set #0 vec #88
        (
            "00000000000000000000010000000000",
            "0000000000000000",
            "B5EB779948BA1623",
        ),
        // set #0 vec #89
        (
            "00000000000000000000008000000000",
            "0000000000000000",
            "961702D18044CB39",
        ),
        // set #0 vec #90
        (
            "00000000000000000000004000000000",
            "0000000000000000",
            "59B78C8BCB38A286",
        ),
        // set #0 vec #91
        (
            "00000000000000000000002000000000",
            "0000000000000000",
            "149630BCFCDCE42F",
        ),
        // set #0 vec #92
        (
            "00000000000000000000001000000000",
            "0000000000000000",
            "31FC84212D821AB8",
        ),
        // set #0 vec #93
        (
            "00000000000000000000000800000000",
            "0000000000000000",
            "1BC58ADA2D336C1C",
        ),
        // set #0 vec #94
        (
            "00000000000000000000000400000000",
            "0000000000000000",
            "3F4A3A940AF166C4",
        ),
        // set #0 vec #95
        (
            "00000000000000000000000200000000",
            "0000000000000000",
            "89753AB2D0CF3F53",
        ),
        // set #0 vec #96
        (
            "00000000000000000000000100000000",
            "0000000000000000",
            "8D9638633EBCA8B8",
        ),
        // set #0 vec #97
        (
            "00000000000000000000000080000000",
            "0000000000000000",
            "5FF9CDADED6F3429",
        ),
        // set #0 vec #98
        (
            "00000000000000000000000040000000",
            "0000000000000000",
            "EE44FA4A9D7A7A05",
        ),
        // set #0 vec #99
        (
            "00000000000000000000000020000000",
            "0000000000000000",
            "58DB5741FE4BC562",
        ),
        // set #0 vec #100
        (
            "00000000000000000000000010000000",
            "0000000000000000",
            "1344DD0FC7FA66A2",
        ),
        // set #0 vec #101
        (
            "00000000000000000000000008000000",
            "0000000000000000",
            "5A26CE40229FC75F",
        ),
        // set #0 vec #102
        (
            "00000000000000000000000004000000",
            "0000000000000000",
            "6D065E9A2CF3B415",
        ),
        // set #0 vec #103
        (
            "00000000000000000000000002000000",
            "0000000000000000",
            "61CA46BABA4C8D3A",
        ),
        // set #0 vec #104
        (
            "00000000000000000000000001000000",
            "0000000000000000",
            "99F140A08FF367C3",
        ),
        // set #0 vec #105
        (
            "00000000000000000000000000800000",
            "0000000000000000",
            "0B8940BDB11BE345",
        ),
        // set #0 vec #106
        (
            "00000000000000000000000000400000",
            "0000000000000000",
            "91010133804AC487",
        ),
        // set #0 vec #107
        (
            "00000000000000000000000000200000",
            "0000000000000000",
            "C78B7A85517B5EEA",
        ),
        // set #0 vec #108
        (
            "00000000000000000000000000100000",
            "0000000000000000",
            "CF2506728C542E36",
        ),
        // set #0 vec #109
        (
            "00000000000000000000000000080000",
            "0000000000000000",
            "FF12180870932832",
        ),
        // set #0 vec #110
        (
            "00000000000000000000000000040000",
            "0000000000000000",
            "6BC57ADDCF695077",
        ),
        // set #0 vec #111
        (
            "00000000000000000000000000020000",
            "0000000000000000",
            "BC4A809EEED597F2",
        ),
        // set #0 vec #112
        (
            "00000000000000000000000000010000",
            "0000000000000000",
            "72B52A71970D60B7",
        ),
        // set #0 vec #113
        (
            "00000000000000000000000000008000",
            "0000000000000000",
            "768E8E52F5B90C82",
        ),
        // set #0 vec #114
        (
            "00000000000000000000000000004000",
            "0000000000000000",
            "DD251D79E46362A2",
        ),
        // set #0 vec #115
        (
            "00000000000000000000000000002000",
            "0000000000000000",
            "E243BEB5973FEFC7",
        ),
        // set #0 vec #116
        (
            "00000000000000000000000000001000",
            "0000000000000000",
            "96CDEBC83DA721B8",
        ),
        // set #0 vec #117
        (
            "00000000000000000000000000000800",
            "0000000000000000",
            "8ADD462F714EFDBA",
        ),
        // set #0 vec #118
        (
            "00000000000000000000000000000400",
            "0000000000000000",
            "AC674285B9E4540C",
        ),
        // set #0 vec #119
        (
            "00000000000000000000000000000200",
            "0000000000000000",
            "1A71A18BE1CDC037",
        ),
        // set #0 vec #120
        (
            "00000000000000000000000000000100",
            "0000000000000000",
            "0CB4877BA13CFF53",
        ),
        // set #0 vec #121
        (
            "00000000000000000000000000000080",
            "0000000000000000",
            "A008F7F61A571A86",
        ),
        // set #0 vec #122
        (
            "00000000000000000000000000000040",
            "0000000000000000",
            "3E26B0CB22D6536F",
        ),
        // set #0 vec #123
        (
            "00000000000000000000000000000020",
            "0000000000000000",
            "B77C0B07B3277059",
        ),
        // set #0 vec #124
        (
            "00000000000000000000000000000010",
            "0000000000000000",
            "BAC5409F22A2AA99",
        ),
        // set #0 vec #125
        (
            "00000000000000000000000000000008",
            "0000000000000000",
            "E7F29B87919049A0",
        ),
        // set #0 vec #126
        (
            "00000000000000000000000000000004",
            "0000000000000000",
            "95B437506A1F5067",
        ),
        // set #0 vec #127
        (
            "00000000000000000000000000000002",
            "0000000000000000",
            "7405DF1B9BC65374",
        ),
        // set #0 vec #128
        (
            "00000000000000000000000000000001",
            "0000000000000000",
            "52489BF5F14F98D2",
        ),
    ],
    &[
        // set #1 vec #0
        (
            "00000000000000000000000000000000",
            "8000000000000000",
            "4FA2D5EE39B74137",
        ),
        // set #1 vec #1
        (
            "00000000000000000000000000000000",
            "4000000000000000",
            "04E60FB5C6441DD5",
        ),
        // set #1 vec #2
        (
            "00000000000000000000000000000000",
            "2000000000000000",
            "FA1171CD58261F10",
        ),
        // set #1 vec #3
        (
            "00000000000000000000000000000000",
            "1000000000000000",
            "349E3CD78060E5EB",
        ),
        // set #1 vec #4
        (
            "00000000000000000000000000000000",
            "0800000000000000",
            "54C6C8482AB8A4E2",
        ),
        // set #1 vec #5
        (
            "00000000000000000000000000000000",
            "0400000000000000",
            "804BCFE59F0C8954",
        ),
        // set #1 vec #6
        (
            "00000000000000000000000000000000",
            "0200000000000000",
            "F4D14CFA3EE9B481",
        ),
        // set #1 vec #7
        (
            "00000000000000000000000000000000",
            "0100000000000000",
            "DA968333A6C65BE7",
        ),
        // set #1 vec #8
        (
            "00000000000000000000000000000000",
            "0080000000000000",
            "46C4FF9301503D2D",
        ),
        // set #1 vec #9
        (
            "00000000000000000000000000000000",
            "0040000000000000",
            "CDFF074C4BA8265E",
        ),
        // set #1 vec #10
        (
            "00000000000000000000000000000000",
            "0020000000000000",
            "BDA0959F633F1AAC",
        ),
        // set #1 vec #11
        (
            "00000000000000000000000000000000",
            "0010000000000000",
            "8FC51AB26FBE5E97",
        ),
        // set #1 vec #12
        (
            "00000000000000000000000000000000",
            "0008000000000000",
            "3DB0C7E5BA997608",
        ),
        // set #1 vec #13
        (
            "00000000000000000000000000000000",
            "0004000000000000",
            "93D28EB470AF073B",
        ),
        // set #1 vec #14
        (
            "00000000000000000000000000000000",
            "0002000000000000",
            "C0A06ED52EDEF8B0",
        ),
        // set #1 vec #15
        (
            "00000000000000000000000000000000",
            "0001000000000000",
            "FABB5009B1711C73",
        ),
        // set #1 vec #16
        (
            "00000000000000000000000000000000",
            "0000800000000000",
            "94753A63CDDF2157",
        ),
        // set #1 vec #17
        (
            "00000000000000000000000000000000",
            "0000400000000000",
            "418C212BECA3330A",
        ),
        // set #1 vec #18
        (
            "00000000000000000000000000000000",
            "0000200000000000",
            "CA45918EDF128CFF",
        ),
        // set #1 vec #19
        (
            "00000000000000000000000000000000",
            "0000100000000000",
            "E0698AB795B7794C",
        ),
        // set #1 vec #20
        (
            "00000000000000000000000000000000",
            "0000080000000000",
            "58762EF054860A81",
        ),
        // set #1 vec #21
        (
            "00000000000000000000000000000000",
            "0000040000000000",
            "883FDCFE44375657",
        ),
        // set #1 vec #22
        (
            "00000000000000000000000000000000",
            "0000020000000000",
            "9FDAAB2BD47390C5",
        ),
        // set #1 vec #23
        (
            "00000000000000000000000000000000",
            "0000010000000000",
            "64F108CA31231BCA",
        ),
        // set #1 vec #24
        (
            "00000000000000000000000000000000",
            "0000008000000000",
            "AFADE1ABADA43362",
        ),
        // set #1 vec #25
        (
            "00000000000000000000000000000000",
            "0000004000000000",
            "6A987D66ED176CCA",
        ),
        // set #1 vec #26
        (
            "00000000000000000000000000000000",
            "0000002000000000",
            "73B9F936475FA8DD",
        ),
        // set #1 vec #27
        (
            "00000000000000000000000000000000",
            "0000001000000000",
            "4E5D0326552C013E",
        ),
        // set #1 vec #28
        (
            "00000000000000000000000000000000",
            "0000000800000000",
            "7583863E0960FFFF",
        ),
        // set #1 vec #29
        (
            "00000000000000000000000000000000",
            "0000000400000000",
            "0E7CDF8E36FD5D46",
        ),
        // set #1 vec #30
        (
            "00000000000000000000000000000000",
            "0000000200000000",
            "CC74A5C1DAE22BA1",
        ),
        // set #1 vec #31
        (
            "00000000000000000000000000000000",
            "0000000100000000",
            "8BF883323140CAA6",
        ),
        // set #1 vec #32
        (
            "00000000000000000000000000000000",
            "0000000080000000",
            "6A061677A32B330B",
        ),
        // set #1 vec #33
        (
            "00000000000000000000000000000000",
            "0000000040000000",
            "91D46AB9B92AE6A4",
        ),
        // set #1 vec #34
        (
            "00000000000000000000000000000000",
            "0000000020000000",
            "D41EDC3D7F846B19",
        ),
        // set #1 vec #35
        (
            "00000000000000000000000000000000",
            "0000000010000000",
            "F9A84A33FA626CD7",
        ),
        // set #1 vec #36
        (
            "00000000000000000000000000000000",
            "0000000008000000",
            "1D415BE3124019F0",
        ),
        // set #1 vec #37
        (
            "00000000000000000000000000000000",
            "0000000004000000",
            "4C154FE569DEED07",
        ),
        // set #1 vec #38
        (
            "00000000000000000000000000000000",
            "0000000002000000",
            "78A847C198DD7271",
        ),
        // set #1 vec #39
        (
            "00000000000000000000000000000000",
            "0000000001000000",
            "1057EE656C013B29",
        ),
        // set #1 vec #40
        (
            "00000000000000000000000000000000",
            "0000000000800000",
            "408DFD7186AF2563",
        ),
        // set #1 vec #41
        (
            "00000000000000000000000000000000",
            "0000000000400000",
            "2DE1757F9E0EE6BE",
        ),
        // set #1 vec #42
        (
            "00000000000000000000000000000000",
            "0000000000200000",
            "CB3610CDBD62958D",
        ),
        // set #1 vec #43
        (
            "00000000000000000000000000000000",
            "0000000000100000",
            "7E69E66C53CA96B0",
        ),
        // set #1 vec #44
        (
            "00000000000000000000000000000000",
            "0000000000080000",
            "89413BF393A23167",
        ),
        // set #1 vec #45
        (
            "00000000000000000000000000000000",
            "0000000000040000",
            "8E5B278638B50B37",
        ),
        // set #1 vec #46
        (
            "00000000000000000000000000000000",
            "0000000000020000",
            "F6B6468C85DFD608",
        ),
        // set #1 vec #47
        (
            "00000000000000000000000000000000",
            "0000000000010000",
            "37E7B0C207D436AE",
        ),
        // set #1 vec #48
        (
            "00000000000000000000000000000000",
            "0000000000008000",
            "D3601DF25C181320",
        ),
        // set #1 vec #49
        (
            "00000000000000000000000000000000",
            "0000000000004000",
            "7BA87CF78E96450B",
        ),
        // set #1 vec #50
        (
            "00000000000000000000000000000000",
            "0000000000002000",
            "1D98AF7FD8DFB524",
        ),
        // set #1 vec #51
        (
            "00000000000000000000000000000000",
            "0000000000001000",
            "3B5E9E8275D471BC",
        ),
        // set #1 vec #52
        (
            "00000000000000000000000000000000",
            "0000000000000800",
            "7609BC1137720287",
        ),
        // set #1 vec #53
        (
            "00000000000000000000000000000000",
            "0000000000000400",
            "5EA325CC78190CA2",
        ),
        // set #1 vec #54
        (
            "00000000000000000000000000000000",
            "0000000000000200",
            "DD05C5D9ED42C284",
        ),
        // set #1 vec #55
        (
            "00000000000000000000000000000000",
            "0000000000000100",
            "8F542A10AF0C08C5",
        ),
        // set #1 vec #56
        (
            "00000000000000000000000000000000",
            "0000000000000080",
            "117C475C1EC79D8F",
        ),
        // set #1 vec #57
        (
            "00000000000000000000000000000000",
            "0000000000000040",
            "FA1B4EFC38CB38F9",
        ),
        // set #1 vec #58
        (
            "00000000000000000000000000000000",
            "0000000000000020",
            "15D6A98F07E76BB7",
        ),
        // set #1 vec #59
        (
            "00000000000000000000000000000000",
            "0000000000000010",
            "FDFC1F860EC1A432",
        ),
        // set #1 vec #60
        (
            "00000000000000000000000000000000",
            "0000000000000008",
            "6653A552632DB3CA",
        ),
        // set #1 vec #61
        (
            "00000000000000000000000000000000",
            "0000000000000004",
            "F90AF3CF757500E0",
        ),
        // set #1 vec #62
        (
            "00000000000000000000000000000000",
            "0000000000000002",
            "64E414ECF54EB681",
        ),
        // set #1 vec #63
        (
            "00000000000000000000000000000000",
            "0000000000000001",
            "AAF64681E2AC59B1",
        ),
    ],
    &[
        // set #2 vec #0
        (
            "00000000000000000000000000000000",
            "0000000000000000",
            "21A5DBEE154B8F6D",
        ),
        // set #2 vec #1
        (
            "01010101010101010101010101010101",
            "0101010101010101",
            "6CABA75030BADD2D",
        ),
        // set #2 vec #2
        (
            "02020202020202020202020202020202",
            "0202020202020202",
            "5242F450A122809D",
        ),
        // set #2 vec #3
        (
            "03030303030303030303030303030303",
            "0303030303030303",
            "FD44C2A21A3C84C9",
        ),
        // set #2 vec #4
        (
            "04040404040404040404040404040404",
            "0404040404040404",
            "38460858F362A332",
        ),
        // set #2 vec #5
        (
            "05050505050505050505050505050505",
            "0505050505050505",
            "4E8152CF58C5E4A9",
        ),
        // set #2 vec #6
        (
            "06060606060606060606060606060606",
            "0606060606060606",
            "CCB720D547FBBE46",
        ),
        // set #2 vec #7
        (
            "07070707070707070707070707070707",
            "0707070707070707",
            "977E36D07FC4A140",
        ),
        // set #2 vec #8
        (
            "08080808080808080808080808080808",
            "0808080808080808",
            "8D1E08C0850CCF90",
        ),
        // set #2 vec #9
        (
            "09090909090909090909090909090909",
            "0909090909090909",
            "0E832F2AB3429407",
        ),
        // set #2 vec #10
        (
            "0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A",
            "0A0A0A0A0A0A0A0A",
            "CCE401EE1C6C9BFF",
        ),
        // set #2 vec #11
        (
            "0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B",
            "0B0B0B0B0B0B0B0B",
            "BF628B652E772BA7",
        ),
        // set #2 vec #12
        (
            "0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C",
            "0C0C0C0C0C0C0C0C",
            "42ACD6FEFE5BB691",
        ),
        // set #2 vec #13
        (
            "0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D",
            "0D0D0D0D0D0D0D0D",
            "ADD4BFF533F1C851",
        ),
        // set #2 vec #14
        (
            "0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E",
            "0E0E0E0E0E0E0E0E",
            "6A504F05FF28ACA8",
        ),
        // set #2 vec #15
        (
            "0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F",
            "0F0F0F0F0F0F0F0F",
            "C5B33F57213421E6",
        ),
        // set #2 vec #16
        (
            "10101010101010101010101010101010",
            "1010101010101010",
            "AC00FDFCAD2D3AE9",
        ),
        // set #2 vec #17
        (
            "11111111111111111111111111111111",
            "1111111111111111",
            "3E1B0CF71189AB99",
        ),
        // set #2 vec #18
        (
            "12121212121212121212121212121212",
            "1212121212121212",
            "5334EAA33D4786D3",
        ),
        // set #2 vec #19
        (
            "13131313131313131313131313131313",
            "1313131313131313",
            "CBC3CC2742BEEC05",
        ),
        // set #2 vec #20
        (
            "14141414141414141414141414141414",
            "1414141414141414",
            "C023A16B3C7054E1",
        ),
        // set #2 vec #21
        (
            "15151515151515151515151515151515",
            "1515151515151515",
            "9C9328D4A0B7A4C4",
        ),
        // set #2 vec #22
        (
            "16161616161616161616161616161616",
            "1616161616161616",
            "72752F9BFF4018D0",
        ),
        // set #2 vec #23
        (
            "17171717171717171717171717171717",
            "1717171717171717",
            "91A3A4775CDE1A93",
        ),
        // set #2 vec #24
        (
            "18181818181818181818181818181818",
            "1818181818181818",
            "6C7920CAEE61E7BC",
        ),
        // set #2 vec #25
        (
            "19191919191919191919191919191919",
            "1919191919191919",
            "6709225C0C76EBB9",
        ),
        // set #2 vec #26
        (
            "1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A",
            "1A1A1A1A1A1A1A1A",
            "9C10B1B6F7BD1E5D",
        ),
        // set #2 vec #27
        (
            "1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B",
            "1B1B1B1B1B1B1B1B",
            "C0099C99E622CAF8",
        ),
        // set #2 vec #28
        (
            "1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C",
            "1C1C1C1C1C1C1C1C",
            "20C0456C020A7109",
        ),
        // set #2 vec #29
        (
            "1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D",
            "1D1D1D1D1D1D1D1D",
            "68E4AFCA39E094BB",
        ),
        // set #2 vec #30
        (
            "1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E",
            "1E1E1E1E1E1E1E1E",
            "1E7F5C7518DF9554",
        ),
        // set #2 vec #31
        (
            "1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F",
            "1F1F1F1F1F1F1F1F",
            "9469D3CEB650F218",
        ),
        // set #2 vec #32
        (
            "20202020202020202020202020202020",
            "2020202020202020",
            "BDDC38EE9918BDD8",
        ),
        // set #2 vec #33
        (
            "21212121212121212121212121212121",
            "2121212121212121",
            "0CA14583D18AB171",
        ),
        // set #2 vec #34
        (
            "22222222222222222222222222222222",
            "2222222222222222",
            "477937288AAF9675",
        ),
        // set #2 vec #35
        (
            "23232323232323232323232323232323",
            "2323232323232323",
            "76A74F7583D69A0C",
        ),
        // set #2 vec #36
        (
            "24242424242424242424242424242424",
            "2424242424242424",
            "70B595CFA9A980B9",
        ),
        // set #2 vec #37
        (
            "25252525252525252525252525252525",
            "2525252525252525",
            "F37385F13459A493",
        ),
        // set #2 vec #38
        (
            "26262626262626262626262626262626",
            "2626262626262626",
            "7B40D58EF301684D",
        ),
        // set #2 vec #39
        (
            "27272727272727272727272727272727",
            "2727272727272727",
            "96A76939ACB73852",
        ),
        // set #2 vec #40
        (
            "28282828282828282828282828282828",
            "2828282828282828",
            "50B32C8CEBC23CA1",
        ),
        // set #2 vec #41
        (
            "29292929292929292929292929292929",
            "2929292929292929",
            "A1C6E9A2DE77F7CD",
        ),
        // set #2 vec #42
        (
            "2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A",
            "2A2A2A2A2A2A2A2A",
            "DFC4C0C964BD4036",
        ),
        // set #2 vec #43
        (
            "2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B",
            "2B2B2B2B2B2B2B2B",
            "A5770E8164118196",
        ),
        // set #2 vec #44
        (
            "2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C",
            "2C2C2C2C2C2C2C2C",
            "A9B788B267D8AB11",
        ),
        // set #2 vec #45
        (
            "2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D",
            "2D2D2D2D2D2D2D2D",
            "724584114D6672BD",
        ),
        // set #2 vec #46
        (
            "2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E",
            "2E2E2E2E2E2E2E2E",
            "64AFA5253F17447C",
        ),
        // set #2 vec #47
        (
            "2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F",
            "2F2F2F2F2F2F2F2F",
            "897135635482481E",
        ),
        // set #2 vec #48
        (
            "30303030303030303030303030303030",
            "3030303030303030",
            "B277D70ECF936724",
        ),
        // set #2 vec #49
        (
            "31313131313131313131313131313131",
            "3131313131313131",
            "6532665C5FB56897",
        ),
        // set #2 vec #50
        (
            "32323232323232323232323232323232",
            "3232323232323232",
            "71C277B4C74822FE",
        ),
        // set #2 vec #51
        (
            "33333333333333333333333333333333",
            "3333333333333333",
            "FC2FF1B6718E8C53",
        ),
        // set #2 vec #52
        (
            "34343434343434343434343434343434",
            "3434343434343434",
            "56C37E81D03AB0F7",
        ),
        // set #2 vec #53
        (
            "35353535353535353535353535353535",
            "3535353535353535",
            "971C20F52BD6A744",
        ),
        // set #2 vec #54
        (
            "36363636363636363636363636363636",
            "3636363636363636",
            "CFC69AD99008E960",
        ),
        // set #2 vec #55
        (
            "37373737373737373737373737373737",
            "3737373737373737",
            "C33A247AF55968F8",
        ),
        // set #2 vec #56
        (
            "38383838383838383838383838383838",
            "3838383838383838",
            "D3B0D96C1C2F102C",
        ),
        // set #2 vec #57
        (
            "39393939393939393939393939393939",
            "3939393939393939",
            "267CD0F496DCF651",
        ),
        // set #2 vec #58
        (
            "3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A",
            "3A3A3A3A3A3A3A3A",
            "758E9204026795C7",
        ),
        // set #2 vec #59
        (
            "3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B",
            "3B3B3B3B3B3B3B3B",
            "44D4B0FF04168F60",
        ),
        // set #2 vec #60
        (
            "3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C",
            "3C3C3C3C3C3C3C3C",
            "8D1ECEAC286DD093",
        ),
        // set #2 vec #61
        (
            "3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D",
            "3D3D3D3D3D3D3D3D",
            "91E5513B611B4B07",
        ),
        // set #2 vec #62
        (
            "3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E",
            "3E3E3E3E3E3E3E3E",
            "6EC99E0444BF2B7D",
        ),
        // set #2 vec #63
        (
            "3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F",
            "3F3F3F3F3F3F3F3F",
            "83387CF7E596A0BA",
        ),
        // set #2 vec #64
        (
            "40404040404040404040404040404040",
            "4040404040404040",
            "49004D5DD78E012F",
        ),
        // set #2 vec #65
        (
            "41414141414141414141414141414141",
            "4141414141414141",
            "566F76FD5220CE9C",
        ),
        // set #2 vec #66
        (
            "42424242424242424242424242424242",
            "4242424242424242",
            "82151FF806A10919",
        ),
        // set #2 vec #67
        (
            "43434343434343434343434343434343",
            "4343434343434343",
            "68A8B02F5037F69F",
        ),
        // set #2 vec #68
        (
            "44444444444444444444444444444444",
            "4444444444444444",
            "B8D1C1655983FB9B",
        ),
        // set #2 vec #69
        (
            "45454545454545454545454545454545",
            "4545454545454545",
            "F6D0C498C6D16BC1",
        ),
        // set #2 vec #70
        (
            "46464646464646464646464646464646",
            "4646464646464646",
            "C71AF1BB575B802A",
        ),
        // set #2 vec #71
        (
            "47474747474747474747474747474747",
            "4747474747474747",
            "7AFB71115556920B",
        ),
        // set #2 vec #72
        (
            "48484848484848484848484848484848",
            "4848484848484848",
            "53A25B037E59ACBA",
        ),
        // set #2 vec #73
        (
            "49494949494949494949494949494949",
            "4949494949494949",
            "7A7103C55DBCDED8",
        ),
        // set #2 vec #74
        (
            "4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A",
            "4A4A4A4A4A4A4A4A",
            "148170D015C218BF",
        ),
        // set #2 vec #75
        (
            "4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B",
            "4B4B4B4B4B4B4B4B",
            "CA979ECC5FDDBF97",
        ),
        // set #2 vec #76
        (
            "4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C",
            "4C4C4C4C4C4C4C4C",
            "24C247AFDCCA7938",
        ),
        // set #2 vec #77
        (
            "4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D",
            "4D4D4D4D4D4D4D4D",
            "7901FD84B4F78B5F",
        ),
        // set #2 vec #78
        (
            "4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E",
            "4E4E4E4E4E4E4E4E",
            "644F08AA654AEAC9",
        ),
        // set #2 vec #79
        (
            "4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F",
            "4F4F4F4F4F4F4F4F",
            "344E3F49BCFF9A0F",
        ),
        // set #2 vec #80
        (
            "50505050505050505050505050505050",
            "5050505050505050",
            "1A7DF18D492EF8CF",
        ),
        // set #2 vec #81
        (
            "51515151515151515151515151515151",
            "5151515151515151",
            "3196730672CD0C6F",
        ),
        // set #2 vec #82
        (
            "52525252525252525252525252525252",
            "5252525252525252",
            "B72C7E16EE0ACACD",
        ),
        // set #2 vec #83
        (
            "53535353535353535353535353535353",
            "5353535353535353",
            "C2BC8B2AB998E711",
        ),
        // set #2 vec #84
        (
            "54545454545454545454545454545454",
            "5454545454545454",
            "CB21583B0DF021DD",
        ),
        // set #2 vec #85
        (
            "55555555555555555555555555555555",
            "5555555555555555",
            "B8E59235A4F470D3",
        ),
        // set #2 vec #86
        (
            "56565656565656565656565656565656",
            "5656565656565656",
            "BEE1DB030C935717",
        ),
        // set #2 vec #87
        (
            "57575757575757575757575757575757",
            "5757575757575757",
            "831A7B5099D2100D",
        ),
        // set #2 vec #88
        (
            "58585858585858585858585858585858",
            "5858585858585858",
            "2A997246A99C4FF8",
        ),
        // set #2 vec #89
        (
            "59595959595959595959595959595959",
            "5959595959595959",
            "018ED090C80DF752",
        ),
        // set #2 vec #90
        (
            "5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A",
            "5A5A5A5A5A5A5A5A",
            "F1FC03247755C943",
        ),
        // set #2 vec #91
        (
            "5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B",
            "5B5B5B5B5B5B5B5B",
            "55A5A820B37660A3",
        ),
        // set #2 vec #92
        (
            "5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C",
            "5C5C5C5C5C5C5C5C",
            "77D8C21A4077BD57",
        ),
        // set #2 vec #93
        (
            "5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D",
            "5D5D5D5D5D5D5D5D",
            "5A474662F3017D8D",
        ),
        // set #2 vec #94
        (
            "5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E",
            "5E5E5E5E5E5E5E5E",
            "E7FE00C77B9CB5C8",
        ),
        // set #2 vec #95
        (
            "5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F",
            "5F5F5F5F5F5F5F5F",
            "C1F5A9F0E3667DFD",
        ),
        // set #2 vec #96
        (
            "60606060606060606060606060606060",
            "6060606060606060",
            "D070DAE6A4CC0FD6",
        ),
        // set #2 vec #97
        (
            "61616161616161616161616161616161",
            "6161616161616161",
            "2E5782307398F040",
        ),
        // set #2 vec #98
        (
            "62626262626262626262626262626262",
            "6262626262626262",
            "AC24CB79ACA263A9",
        ),
        // set #2 vec #99
        (
            "63636363636363636363636363636363",
            "6363636363636363",
            "F085D188ECFECF19",
        ),
        // set #2 vec #100
        (
            "64646464646464646464646464646464",
            "6464646464646464",
            "E8573E9FB5DB8067",
        ),
        // set #2 vec #101
        (
            "65656565656565656565656565656565",
            "6565656565656565",
            "6586F1C21F49F1C9",
        ),
        // set #2 vec #102
        (
            "66666666666666666666666666666666",
            "6666666666666666",
            "AA6ED1BD028A7018",
        ),
        // set #2 vec #103
        (
            "67676767676767676767676767676767",
            "6767676767676767",
            "5A0E065388DB0D92",
        ),
        // set #2 vec #104
        (
            "68686868686868686868686868686868",
            "6868686868686868",
            "2FF48C50E035D377",
        ),
        // set #2 vec #105
        (
            "69696969696969696969696969696969",
            "6969696969696969",
            "2839158F422633F7",
        ),
        // set #2 vec #106
        (
            "6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A",
            "6A6A6A6A6A6A6A6A",
            "366261D9B681CD6E",
        ),
        // set #2 vec #107
        (
            "6B6B6B6B6B6B6B6B6B6B6B6B6B6B6B6B",
            "6B6B6B6B6B6B6B6B",
            "400676D499B835CC",
        ),
        // set #2 vec #108
        (
            "6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C",
            "6C6C6C6C6C6C6C6C",
            "38C60E0610093C5F",
        ),
        // set #2 vec #109
        (
            "6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D",
            "6D6D6D6D6D6D6D6D",
            "D944CCF4F1278308",
        ),
        // set #2 vec #110
        (
            "6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E",
            "6E6E6E6E6E6E6E6E",
            "D27CA8021D0E8900",
        ),
        // set #2 vec #111
        (
            "6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F",
            "6F6F6F6F6F6F6F6F",
            "2FCAA7CC8286C991",
        ),
        // set #2 vec #112
        (
            "70707070707070707070707070707070",
            "7070707070707070",
            "01A28A76FB00E262",
        ),
        // set #2 vec #113
        (
            "71717171717171717171717171717171",
            "7171717171717171",
            "A3079D2B4F7998A4",
        ),
        // set #2 vec #114
        (
            "72727272727272727272727272727272",
            "7272727272727272",
            "4473A4CDE2E07B09",
        ),
        // set #2 vec #115
        (
            "73737373737373737373737373737373",
            "7373737373737373",
            "11B1DFC2BC9014BE",
        ),
        // set #2 vec #116
        (
            "74747474747474747474747474747474",
            "7474747474747474",
            "E42BEAA2B5E0F0D2",
        ),
        // set #2 vec #117
        (
            "75757575757575757575757575757575",
            "7575757575757575",
            "5D3C8E4D35C2CBBB",
        ),
        // set #2 vec #118
        (
            "76767676767676767676767676767676",
            "7676767676767676",
            "AF4264E1D1C21572",
        ),
        // set #2 vec #119
        (
            "77777777777777777777777777777777",
            "7777777777777777",
            "A8C305EE61876059",
        ),
        // set #2 vec #120
        (
            "78787878787878787878787878787878",
            "7878787878787878",
            "58CCA4F7D38DB71B",
        ),
        // set #2 vec #121
        (
            "79797979797979797979797979797979",
            "7979797979797979",
            "D6489805A076BA05",
        ),
        // set #2 vec #122
        (
            "7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A",
            "7A7A7A7A7A7A7A7A",
            "CB400FF4D35A21F0",
        ),
        // set #2 vec #123
        (
            "7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B",
            "7B7B7B7B7B7B7B7B",
            "5835B7C049530FB8",
        ),
        // set #2 vec #124
        (
            "7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C",
            "7C7C7C7C7C7C7C7C",
            "28151E5AB60D8965",
        ),
        // set #2 vec #125
        (
            "7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D",
            "7D7D7D7D7D7D7D7D",
            "9ABF28D29C7564D1",
        ),
        // set #2 vec #126
        (
            "7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E",
            "7E7E7E7E7E7E7E7E",
            "625CA434EA6015CC",
        ),
        // set #2 vec #127
        (
            "7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F",
            "7F7F7F7F7F7F7F7F",
            "91706282A6F71145",
        ),
        // set #2 vec #128
        (
            "80808080808080808080808080808080",
            "8080808080808080",
            "9A34CA2680A8FB2C",
        ),
        // set #2 vec #129
        (
            "81818181818181818181818181818181",
            "8181818181818181",
            "68B056DE990155CB",
        ),
        // set #2 vec #130
        (
            "82828282828282828282828282828282",
            "8282828282828282",
            "B0CA60CC26647182",
        ),
        // set #2 vec #131
        (
            "83838383838383838383838383838383",
            "8383838383838383",
            "D28ED6F8CFE7B7F0",
        ),
        // set #2 vec #132
        (
            "84848484848484848484848484848484",
            "8484848484848484",
            "4529421C70FD6B40",
        ),
        // set #2 vec #133
        (
            "85858585858585858585858585858585",
            "8585858585858585",
            "BACEC7862A754336",
        ),
        // set #2 vec #134
        (
            "86868686868686868686868686868686",
            "8686868686868686",
            "4B59956ECB6987A5",
        ),
        // set #2 vec #135
        (
            "87878787878787878787878787878787",
            "8787878787878787",
            "68D7BA8FF1BD8F10",
        ),
        // set #2 vec #136
        (
            "88888888888888888888888888888888",
            "8888888888888888",
            "F64675D642402DE2",
        ),
        // set #2 vec #137
        (
            "89898989898989898989898989898989",
            "8989898989898989",
            "9DA213226DC02670",
        ),
        // set #2 vec #138
        (
            "8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A",
            "8A8A8A8A8A8A8A8A",
            "F18915137DD586B0",
        ),
        // set #2 vec #139
        (
            "8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B",
            "8B8B8B8B8B8B8B8B",
            "8D89FAE8CA1C018D",
        ),
        // set #2 vec #140
        (
            "8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C",
            "8C8C8C8C8C8C8C8C",
            "CE46CE41ED57BA06",
        ),
        // set #2 vec #141
        (
            "8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D",
            "8D8D8D8D8D8D8D8D",
            "0D163E7577A8855A",
        ),
        // set #2 vec #142
        (
            "8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E",
            "8E8E8E8E8E8E8E8E",
            "8E6FD0B5CCCF18DD",
        ),
        // set #2 vec #143
        (
            "8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F",
            "8F8F8F8F8F8F8F8F",
            "07E64F10F5BE3047",
        ),
        // set #2 vec #144
        (
            "90909090909090909090909090909090",
            "9090909090909090",
            "3D7BB8C9512FAE79",
        ),
        // set #2 vec #145
        (
            "91919191919191919191919191919191",
            "9191919191919191",
            "F7C11820587A8F92",
        ),
        // set #2 vec #146
        (
            "92929292929292929292929292929292",
            "9292929292929292",
            "04300AD157EB27D3",
        ),
        // set #2 vec #147
        (
            "93939393939393939393939393939393",
            "9393939393939393",
            "7EC0611CA1FE60E8",
        ),
        // set #2 vec #148
        (
            "94949494949494949494949494949494",
            "9494949494949494",
            "DF7D2FA625F9E973",
        ),
        // set #2 vec #149
        (
            "95959595959595959595959595959595",
            "9595959595959595",
            "BE6587884B6DEA49",
        ),
        // set #2 vec #150
        (
            "96969696969696969696969696969696",
            "9696969696969696",
            "EBC8A5C154810C45",
        ),
        // set #2 vec #151
        (
            "97979797979797979797979797979797",
            "9797979797979797",
            "1D4C585A7E117553",
        ),
        // set #2 vec #152
        (
            "98989898989898989898989898989898",
            "9898989898989898",
            "A5EBE4A940094C69",
        ),
        // set #2 vec #153
        (
            "99999999999999999999999999999999",
            "9999999999999999",
            "9137D6D560936157",
        ),
        // set #2 vec #154
        (
            "9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A",
            "9A9A9A9A9A9A9A9A",
            "5309FBD4A8DF41AD",
        ),
        // set #2 vec #155
        (
            "9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B",
            "9B9B9B9B9B9B9B9B",
            "719B0AA4E73F319B",
        ),
        // set #2 vec #156
        (
            "9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C",
            "9C9C9C9C9C9C9C9C",
            "699969DAD1399A2C",
        ),
        // set #2 vec #157
        (
            "9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D",
            "9D9D9D9D9D9D9D9D",
            "F7675963C1828C6A",
        ),
        // set #2 vec #158
        (
            "9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E",
            "9E9E9E9E9E9E9E9E",
            "CAD25867B7B2CD79",
        ),
        // set #2 vec #159
        (
            "9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F",
            "9F9F9F9F9F9F9F9F",
            "8D8BFC68D675488F",
        ),
        // set #2 vec #160
        (
            "A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0",
            "A0A0A0A0A0A0A0A0",
            "EACB8CAE72FDFF76",
        ),
        // set #2 vec #161
        (
            "A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1",
            "A1A1A1A1A1A1A1A1",
            "54B7696DC05D6134",
        ),
        // set #2 vec #162
        (
            "A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2",
            "A2A2A2A2A2A2A2A2",
            "15680063D4936D20",
        ),
        // set #2 vec #163
        (
            "A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3",
            "A3A3A3A3A3A3A3A3",
            "CFF5B49498BDB9D4",
        ),
        // set #2 vec #164
        (
            "A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4",
            "A4A4A4A4A4A4A4A4",
            "D696AE19D1429342",
        ),
        // set #2 vec #165
        (
            "A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5",
            "A5A5A5A5A5A5A5A5",
            "EB9FDE4C1DE509D7",
        ),
        // set #2 vec #166
        (
            "A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6",
            "A6A6A6A6A6A6A6A6",
            "FDF7DD9BF59F15EF",
        ),
        // set #2 vec #167
        (
            "A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7",
            "A7A7A7A7A7A7A7A7",
            "7F8220A8A24F9E7B",
        ),
        // set #2 vec #168
        (
            "A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8",
            "A8A8A8A8A8A8A8A8",
            "7AD506F629C1B3A6",
        ),
        // set #2 vec #169
        (
            "A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9",
            "A9A9A9A9A9A9A9A9",
            "DB966AFE3E83B861",
        ),
        // set #2 vec #170
        (
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            "AAAAAAAAAAAAAAAA",
            "BAE9CF655D8204E3",
        ),
        // set #2 vec #171
        (
            "ABABABABABABABABABABABABABABABAB",
            "ABABABABABABABAB",
            "EBD329E2C0594A52",
        ),
        // set #2 vec #172
        (
            "ACACACACACACACACACACACACACACACAC",
            "ACACACACACACACAC",
            "0754CB1DC1B144C6",
        ),
        // set #2 vec #173
        (
            "ADADADADADADADADADADADADADADADAD",
            "ADADADADADADADAD",
            "93FD2776D5689CD0",
        ),
        // set #2 vec #174
        (
            "AEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE",
            "AEAEAEAEAEAEAEAE",
            "5C9372172C33454C",
        ),
        // set #2 vec #175
        (
            "AFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF",
            "AFAFAFAFAFAFAFAF",
            "D6E1275D786DE69E",
        ),
        // set #2 vec #176
        (
            "B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0",
            "B0B0B0B0B0B0B0B0",
            "074A198C305252A4",
        ),
        // set #2 vec #177
        (
            "B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1",
            "B1B1B1B1B1B1B1B1",
            "6E26D852C00BAEB3",
        ),
        // set #2 vec #178
        (
            "B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2",
            "B2B2B2B2B2B2B2B2",
            "2B370850A5FCA500",
        ),
        // set #2 vec #179
        (
            "B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3",
            "B3B3B3B3B3B3B3B3",
            "B49B04B30F4CB2D2",
        ),
        // set #2 vec #180
        (
            "B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4",
            "B4B4B4B4B4B4B4B4",
            "9E3BC0BCD3CFF466",
        ),
        // set #2 vec #181
        (
            "B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5",
            "B5B5B5B5B5B5B5B5",
            "0873A3528EE214CF",
        ),
        // set #2 vec #182
        (
            "B6B6B6B6B6B6B6B6B6B6B6B6B6B6B6B6",
            "B6B6B6B6B6B6B6B6",
            "BE2F44E09323C5E3",
        ),
        // set #2 vec #183
        (
            "B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7",
            "B7B7B7B7B7B7B7B7",
            "A624BF7E0C7371BD",
        ),
        // set #2 vec #184
        (
            "B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8",
            "B8B8B8B8B8B8B8B8",
            "254D70CDA6435D0A",
        ),
        // set #2 vec #185
        (
            "B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9",
            "B9B9B9B9B9B9B9B9",
            "5D857F317FD0E124",
        ),
        // set #2 vec #186
        (
            "BABABABABABABABABABABABABABABABA",
            "BABABABABABABABA",
            "C5946AA4784B433D",
        ),
        // set #2 vec #187
        (
            "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            "BBBBBBBBBBBBBBBB",
            "823FE76F1B092058",
        ),
        // set #2 vec #188
        (
            "BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC",
            "BCBCBCBCBCBCBCBC",
            "23232BFC9605C1FE",
        ),
        // set #2 vec #189
        (
            "BDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBD",
            "BDBDBDBDBDBDBDBD",
            "E3AD1301A24142AB",
        ),
        // set #2 vec #190
        (
            "BEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBE",
            "BEBEBEBEBEBEBEBE",
            "A59551D740C21E24",
        ),
        // set #2 vec #191
        (
            "BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF",
            "BFBFBFBFBFBFBFBF",
            "DD51AA54A8679D90",
        ),
        // set #2 vec #192
        (
            "C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0",
            "C0C0C0C0C0C0C0C0",
            "78F45CC40CEC2E93",
        ),
        // set #2 vec #193
        (
            "C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1",
            "C1C1C1C1C1C1C1C1",
            "3BB9D6E057F47FFE",
        ),
        // set #2 vec #194
        (
            "C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2",
            "C2C2C2C2C2C2C2C2",
            "749CFABB7B5C5821",
        ),
        // set #2 vec #195
        (
            "C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3",
            "C3C3C3C3C3C3C3C3",
            "1E5B1CFBBDB0C9F1",
        ),
        // set #2 vec #196
        (
            "C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4",
            "C4C4C4C4C4C4C4C4",
            "C4CC0EFF546CE088",
        ),
        // set #2 vec #197
        (
            "C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5",
            "C5C5C5C5C5C5C5C5",
            "08AFA212C14F3D95",
        ),
        // set #2 vec #198
        (
            "C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6",
            "C6C6C6C6C6C6C6C6",
            "ED54E38986A9C3E0",
        ),
        // set #2 vec #199
        (
            "C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7",
            "C7C7C7C7C7C7C7C7",
            "C06A363FF909D39D",
        ),
        // set #2 vec #200
        (
            "C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8",
            "C8C8C8C8C8C8C8C8",
            "4C04E1629985AFC5",
        ),
        // set #2 vec #201
        (
            "C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9",
            "C9C9C9C9C9C9C9C9",
            "54D5B758C2A707C0",
        ),
        // set #2 vec #202
        (
            "CACACACACACACACACACACACACACACACA",
            "CACACACACACACACA",
            "FE720A0F9D1C8907",
        ),
        // set #2 vec #203
        (
            "CBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCB",
            "CBCBCBCBCBCBCBCB",
            "C249D87F3A37A7A6",
        ),
        // set #2 vec #204
        (
            "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC",
            "CCCCCCCCCCCCCCCC",
            "12ABA9F0AB7DEE1B",
        ),
        // set #2 vec #205
        (
            "CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD",
            "CDCDCDCDCDCDCDCD",
            "CB72B2F230BB5D2B",
        ),
        // set #2 vec #206
        (
            "CECECECECECECECECECECECECECECECE",
            "CECECECECECECECE",
            "91C8C06C731F769D",
        ),
        // set #2 vec #207
        (
            "CFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCF",
            "CFCFCFCFCFCFCFCF",
            "CC6FF2B07ACB2400",
        ),
        // set #2 vec #208
        (
            "D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0",
            "D0D0D0D0D0D0D0D0",
            "1CBAE883F374E148",
        ),
        // set #2 vec #209
        (
            "D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1",
            "D1D1D1D1D1D1D1D1",
            "A8509A3504B1281E",
        ),
        // set #2 vec #210
        (
            "D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2",
            "D2D2D2D2D2D2D2D2",
            "180BB7DC814A98F4",
        ),
        // set #2 vec #211
        (
            "D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3",
            "D3D3D3D3D3D3D3D3",
            "82E6AF824A322810",
        ),
        // set #2 vec #212
        (
            "D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4",
            "D4D4D4D4D4D4D4D4",
            "0C497C678BAC9073",
        ),
        // set #2 vec #213
        (
            "D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5",
            "D5D5D5D5D5D5D5D5",
            "4C87E0FD73F6491D",
        ),
        // set #2 vec #214
        (
            "D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6",
            "D6D6D6D6D6D6D6D6",
            "09DA33A688837896",
        ),
        // set #2 vec #215
        (
            "D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7",
            "D7D7D7D7D7D7D7D7",
            "8C3863C0610344B9",
        ),
        // set #2 vec #216
        (
            "D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8",
            "D8D8D8D8D8D8D8D8",
            "245D7C4FA2F2E43C",
        ),
        // set #2 vec #217
        (
            "D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9",
            "D9D9D9D9D9D9D9D9",
            "AC13E8AE410F323D",
        ),
        // set #2 vec #218
        (
            "DADADADADADADADADADADADADADADADA",
            "DADADADADADADADA",
            "C4E21F4CBCAD4413",
        ),
        // set #2 vec #219
        (
            "DBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDB",
            "DBDBDBDBDBDBDBDB",
            "6AA1E55C36A2682A",
        ),
        // set #2 vec #220
        (
            "DCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC",
            "DCDCDCDCDCDCDCDC",
            "D832821D2906B4B3",
        ),
        // set #2 vec #221
        (
            "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD",
            "DDDDDDDDDDDDDDDD",
            "77437FA1C20F2026",
        ),
        // set #2 vec #222
        (
            "DEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDE",
            "DEDEDEDEDEDEDEDE",
            "14DCF1D4FA1AC050",
        ),
        // set #2 vec #223
        (
            "DFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDF",
            "DFDFDFDFDFDFDFDF",
            "9D4B0AA902D8C991",
        ),
        // set #2 vec #224
        (
            "E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0",
            "E0E0E0E0E0E0E0E0",
            "A9220173BC5C90D3",
        ),
        // set #2 vec #225
        (
            "E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1",
            "E1E1E1E1E1E1E1E1",
            "5A1B0B1B626C6013",
        ),
        // set #2 vec #226
        (
            "E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2",
            "E2E2E2E2E2E2E2E2",
            "01379BEAE1A99B8F",
        ),
        // set #2 vec #227
        (
            "E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3",
            "E3E3E3E3E3E3E3E3",
            "3B315FB8C3790AE5",
        ),
        // set #2 vec #228
        (
            "E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4",
            "E4E4E4E4E4E4E4E4",
            "6FB6F6D1C58FEE17",
        ),
        // set #2 vec #229
        (
            "E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5",
            "E5E5E5E5E5E5E5E5",
            "19CB239FA7FB4F9A",
        ),
        // set #2 vec #230
        (
            "E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6",
            "E6E6E6E6E6E6E6E6",
            "3B7A6FE621C955B9",
        ),
        // set #2 vec #231
        (
            "E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7",
            "E7E7E7E7E7E7E7E7",
            "186F0FF49C9A477F",
        ),
        // set #2 vec #232
        (
            "E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8",
            "E8E8E8E8E8E8E8E8",
            "14D8B03ADA6D657A",
        ),
        // set #2 vec #233
        (
            "E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9",
            "E9E9E9E9E9E9E9E9",
            "0BC734E3FA645E9F",
        ),
        // set #2 vec #234
        (
            "EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA",
            "EAEAEAEAEAEAEAEA",
            "803029F702C64ACE",
        ),
        // set #2 vec #235
        (
            "EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB",
            "EBEBEBEBEBEBEBEB",
            "FBAB9F8696D6BA77",
        ),
        // set #2 vec #236
        (
            "ECECECECECECECECECECECECECECECEC",
            "ECECECECECECECEC",
            "7BB9B6707793A276",
        ),
        // set #2 vec #237
        (
            "EDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED",
            "EDEDEDEDEDEDEDED",
            "D1C79B8A49FB6DBC",
        ),
        // set #2 vec #238
        (
            "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE",
            "EEEEEEEEEEEEEEEE",
            "2B1564BDEACB7B52",
        ),
        // set #2 vec #239
        (
            "EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF",
            "EFEFEFEFEFEFEFEF",
            "987031C9C36DB4FC",
        ),
        // set #2 vec #240
        (
            "F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0",
            "F0F0F0F0F0F0F0F0",
            "34C51D8E465C37B3",
        ),
        // set #2 vec #241
        (
            "F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1",
            "F1F1F1F1F1F1F1F1",
            "8BF64B6997C66DB5",
        ),
        // set #2 vec #242
        (
            "F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2",
            "F2F2F2F2F2F2F2F2",
            "AE2F6E701775A4F9",
        ),
        // set #2 vec #243
        (
            "F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3",
            "F3F3F3F3F3F3F3F3",
            "26E2F58E94216BE8",
        ),
        // set #2 vec #244
        (
            "F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4",
            "F4F4F4F4F4F4F4F4",
            "095BE185ED2220CE",
        ),
        // set #2 vec #245
        (
            "F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5",
            "F5F5F5F5F5F5F5F5",
            "E0D3DB2A70584C12",
        ),
        // set #2 vec #246
        (
            "F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6",
            "F6F6F6F6F6F6F6F6",
            "EEE3687E33787521",
        ),
        // set #2 vec #247
        (
            "F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7",
            "F7F7F7F7F7F7F7F7",
            "D0977FD8EDB1CD7A",
        ),
        // set #2 vec #248
        (
            "F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8",
            "F8F8F8F8F8F8F8F8",
            "D6FDC0D5EAF80022",
        ),
        // set #2 vec #249
        (
            "F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9",
            "F9F9F9F9F9F9F9F9",
            "57BA725738661825",
        ),
        // set #2 vec #250
        (
            "FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFA",
            "FAFAFAFAFAFAFAFA",
            "76124554EBE44389",
        ),
        // set #2 vec #251
        (
            "FBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB",
            "FBFBFBFBFBFBFBFB",
            "6D62A38F77BC4B87",
        ),
        // set #2 vec #252
        (
            "FCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFC",
            "FCFCFCFCFCFCFCFC",
            "A63A2B299E16E3F0",
        ),
        // set #2 vec #253
        (
            "FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFD",
            "FDFDFDFDFDFDFDFD",
            "BBBC7CC82DE3D48A",
        ),
        // set #2 vec #254
        (
            "FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE",
            "FEFEFEFEFEFEFEFE",
            "5A94182F3EA5DFDA",
        ),
        // set #2 vec #255
        (
            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
            "FFFFFFFFFFFFFFFF",
            "778769E9BE0167B7",
        ),
    ],
    &[
        // set #3 vec #0
        (
            "000102030405060708090A0B0C0D0E0F",
            "0011223344556677",
            "2DDC149BCF088B9E",
        ),
        // set #3 vec #1
        (
            "2BD6459F82C5B300952C49104881FF48",
            "EA024714AD5C4D84",
            "11E43B86D231EA64",
        ),
    ],
    &[
        // set #4 vec #0
        (
            "80000000000000000000000000000000",
            "0883F9B21EDE92A4",
            "0000000000000000",
        ),
        // set #4 vec #1
        (
            "40000000000000000000000000000000",
            "980D92DB9474990D",
            "0000000000000000",
        ),
        // set #4 vec #2
        (
            "20000000000000000000000000000000",
            "23EFABC0C6BC82D8",
            "0000000000000000",
        ),
        // set #4 vec #3
        (
            "10000000000000000000000000000000",
            "0D46805307A220B2",
            "0000000000000000",
        ),
        // set #4 vec #4
        (
            "08000000000000000000000000000000",
            "537D0A54A539C316",
            "0000000000000000",
        ),
        // set #4 vec #5
        (
            "04000000000000000000000000000000",
            "FD9AE257385F0E99",
            "0000000000000000",
        ),
        // set #4 vec #6
        (
            "02000000000000000000000000000000",
            "BC5CE465241BA4E5",
            "0000000000000000",
        ),
        // set #4 vec #7
        (
            "01000000000000000000000000000000",
            "D5FF301398080338",
            "0000000000000000",
        ),
        // set #4 vec #8
        (
            "00800000000000000000000000000000",
            "32C07D10775C3679",
            "0000000000000000",
        ),
        // set #4 vec #9
        (
            "00400000000000000000000000000000",
            "E414C7AAD4A0481C",
            "0000000000000000",
        ),
        // set #4 vec #10
        (
            "00200000000000000000000000000000",
            "4816A8B47CA2864A",
            "0000000000000000",
        ),
        // set #4 vec #11
        (
            "00100000000000000000000000000000",
            "7EF68C272EA20EA2",
            "0000000000000000",
        ),
        // set #4 vec #12
        (
            "00080000000000000000000000000000",
            "460E73910B780CD5",
            "0000000000000000",
        ),
        // set #4 vec #13
        (
            "00040000000000000000000000000000",
            "C29D192C699A4123",
            "0000000000000000",
        ),
        // set #4 vec #14
        (
            "00020000000000000000000000000000",
            "BB7ECABDE89808EE",
            "0000000000000000",
        ),
        // set #4 vec #15
        (
            "00010000000000000000000000000000",
            "041A3E694C986746",
            "0000000000000000",
        ),
        // set #4 vec #16
        (
            "00008000000000000000000000000000",
            "5D315BE45019C9EE",
            "0000000000000000",
        ),
        // set #4 vec #17
        (
            "00004000000000000000000000000000",
            "B173C0380EEE9D5A",
            "0000000000000000",
        ),
        // set #4 vec #18
        (
            "00002000000000000000000000000000",
            "3A395DA50A95A8F2",
            "0000000000000000",
        ),
        // set #4 vec #19
        (
            "00001000000000000000000000000000",
            "455DBA5BBF9CDF4A",
            "0000000000000000",
        ),
        // set #4 vec #20
        (
            "00000800000000000000000000000000",
            "876A97B5AED4493F",
            "0000000000000000",
        ),
        // set #4 vec #21
        (
            "00000400000000000000000000000000",
            "87AAAF4F5CA8C3B5",
            "0000000000000000",
        ),
        // set #4 vec #22
        (
            "00000200000000000000000000000000",
            "A99EB2408C034909",
            "0000000000000000",
        ),
        // set #4 vec #23
        (
            "00000100000000000000000000000000",
            "CA7AD57C1EFB4B72",
            "0000000000000000",
        ),
        // set #4 vec #24
        (
            "00000080000000000000000000000000",
            "102590CDAB354066",
            "0000000000000000",
        ),
        // set #4 vec #25
        (
            "00000040000000000000000000000000",
            "9EC61F058CE1043E",
            "0000000000000000",
        ),
        // set #4 vec #26
        (
            "00000020000000000000000000000000",
            "0EAAF15B5F51748E",
            "0000000000000000",
        ),
        // set #4 vec #27
        (
            "00000010000000000000000000000000",
            "EBFC91ACF481EE81",
            "0000000000000000",
        ),
        // set #4 vec #28
        (
            "00000008000000000000000000000000",
            "6A956A59DF3A8369",
            "0000000000000000",
        ),
        // set #4 vec #29
        (
            "00000004000000000000000000000000",
            "1F746D9294860FA0",
            "0000000000000000",
        ),
        // set #4 vec #30
        (
            "00000002000000000000000000000000",
            "2426D42F70DBF26F",
            "0000000000000000",
        ),
        // set #4 vec #31
        (
            "00000001000000000000000000000000",
            "E0AE28FBEBF0BFEC",
            "0000000000000000",
        ),
        // set #4 vec #32
        (
            "00000000800000000000000000000000",
            "D56F849DB6FD87AE",
            "0000000000000000",
        ),
        // set #4 vec #33
        (
            "00000000400000000000000000000000",
            "F8A1896E45DED050",
            "0000000000000000",
        ),
        // set #4 vec #34
        (
            "00000000200000000000000000000000",
            "8C4A3561E9B571F4",
            "0000000000000000",
        ),
        // set #4 vec #35
        (
            "00000000100000000000000000000000",
            "5AE2BA35C6C41420",
            "0000000000000000",
        ),
        // set #4 vec #36
        (
            "00000000080000000000000000000000",
            "D5EF25EDC2DD09F2",
            "0000000000000000",
        ),
        // set #4 vec #37
        (
            "00000000040000000000000000000000",
            "8748206CD0F59EB3",
            "0000000000000000",
        ),
        // set #4 vec #38
        (
            "00000000020000000000000000000000",
            "A75A463CCB77D331",
            "0000000000000000",
        ),
        // set #4 vec #39
        (
            "00000000010000000000000000000000",
            "B0FBDE8C1DD4200B",
            "0000000000000000",
        ),
        // set #4 vec #40
        (
            "00000000008000000000000000000000",
            "9458CF472C16A3E6",
            "0000000000000000",
        ),
        // set #4 vec #41
        (
            "00000000004000000000000000000000",
            "2EFD27A613A852C5",
            "0000000000000000",
        ),
        // set #4 vec #42
        (
            "00000000002000000000000000000000",
            "3CED8BE708D4C71C",
            "0000000000000000",
        ),
        // set #4 vec #43
        (
            "00000000001000000000000000000000",
            "4CAAEDBB9E9A6455",
            "0000000000000000",
        ),
        // set #4 vec #44
        (
            "00000000000800000000000000000000",
            "D1973B1C0F5CC5D2",
            "0000000000000000",
        ),
        // set #4 vec #45
        (
            "00000000000400000000000000000000",
            "0C519DDABFD83AC2",
            "0000000000000000",
        ),
        // set #4 vec #46
        (
            "00000000000200000000000000000000",
            "273DE374D0048064",
            "0000000000000000",
        ),
        // set #4 vec #47
        (
            "00000000000100000000000000000000",
            "62615B372F3B4B13",
            "0000000000000000",
        ),
        // set #4 vec #48
        (
            "00000000000080000000000000000000",
            "345FD38BEC329936",
            "0000000000000000",
        ),
        // set #4 vec #49
        (
            "00000000000040000000000000000000",
            "E9A6C0C2D2534BB4",
            "0000000000000000",
        ),
        // set #4 vec #50
        (
            "00000000000020000000000000000000",
            "5622B352387AA615",
            "0000000000000000",
        ),
        // set #4 vec #51
        (
            "00000000000010000000000000000000",
            "90F83484485C31B1",
            "0000000000000000",
        ),
        // set #4 vec #52
        (
            "00000000000008000000000000000000",
            "A58B420CC0437E3D",
            "0000000000000000",
        ),
        // set #4 vec #53
        (
            "00000000000004000000000000000000",
            "11F2815DC19B0E36",
            "0000000000000000",
        ),
        // set #4 vec #54
        (
            "00000000000002000000000000000000",
            "FBC09684C1B4B1EA",
            "0000000000000000",
        ),
        // set #4 vec #55
        (
            "00000000000001000000000000000000",
            "319B590C05331046",
            "0000000000000000",
        ),
        // set #4 vec #56
        (
            "00000000000000800000000000000000",
            "A4A4F28100931026",
            "0000000000000000",
        ),
        // set #4 vec #57
        (
            "00000000000000400000000000000000",
            "5E92B1E26B610DCB",
            "0000000000000000",
        ),
        // set #4 vec #58
        (
            "00000000000000200000000000000000",
            "CB257D4F6E4C8EEC",
            "0000000000000000",
        ),
        // set #4 vec #59
        (
            "00000000000000100000000000000000",
            "F3620238F3871C8C",
            "0000000000000000",
        ),
        // set #4 vec #60
        (
            "00000000000000080000000000000000",
            "B94972DD5F507690",
            "0000000000000000",
        ),
        // set #4 vec #61
        (
            "00000000000000040000000000000000",
            "12242D1BC8A26BAB",
            "0000000000000000",
        ),
        // set #4 vec #62
        (
            "00000000000000020000000000000000",
            "EE5F3ABA42A6B8F2",
            "0000000000000000",
        ),
        // set #4 vec #63
        (
            "00000000000000010000000000000000",
            "D419786241667FE6",
            "0000000000000000",
        ),
        // set #4 vec #64
        (
            "00000000000000008000000000000000",
            "260D25CD16C2FE03",
            "0000000000000000",
        ),
        // set #4 vec #65
        (
            "00000000000000004000000000000000",
            "5DBFB5431F9F0B43",
            "0000000000000000",
        ),
        // set #4 vec #66
        (
            "00000000000000002000000000000000",
            "ED970CB513E013EA",
            "0000000000000000",
        ),
        // set #4 vec #67
        (
            "00000000000000001000000000000000",
            "8C3194973F07C308",
            "0000000000000000",
        ),
        // set #4 vec #68
        (
            "00000000000000000800000000000000",
            "66307640072EF1E1",
            "0000000000000000",
        ),
        // set #4 vec #69
        (
            "00000000000000000400000000000000",
            "D1E225D24C5F0336",
            "0000000000000000",
        ),
        // set #4 vec #70
        (
            "00000000000000000200000000000000",
            "1D66C41014D4B045",
            "0000000000000000",
        ),
        // set #4 vec #71
        (
            "00000000000000000100000000000000",
            "B1415F4C94D1FE00",
            "0000000000000000",
        ),
        // set #4 vec #72
        (
            "00000000000000000080000000000000",
            "04FF3627CA3759DE",
            "0000000000000000",
        ),
        // set #4 vec #73
        (
            "00000000000000000040000000000000",
            "AB670462827F9522",
            "0000000000000000",
        ),
        // set #4 vec #74
        (
            "00000000000000000020000000000000",
            "0BF6B3B73AEE4CA1",
            "0000000000000000",
        ),
        // set #4 vec #75
        (
            "00000000000000000010000000000000",
            "415A68A0594A5DEF",
            "0000000000000000",
        ),
        // set #4 vec #76
        (
            "00000000000000000008000000000000",
            "14A0CECD1D18EEEB",
            "0000000000000000",
        ),
        // set #4 vec #77
        (
            "00000000000000000004000000000000",
            "2418273180729306",
            "0000000000000000",
        ),
        // set #4 vec #78
        (
            "00000000000000000002000000000000",
            "E6148195FE84E0E5",
            "0000000000000000",
        ),
        // set #4 vec #79
        (
            "00000000000000000001000000000000",
            "D13573BB3CD8726C",
            "0000000000000000",
        ),
        // set #4 vec #80
        (
            "00000000000000000000800000000000",
            "2BAB7752C44B20F5",
            "0000000000000000",
        ),
        // set #4 vec #81
        (
            "00000000000000000000400000000000",
            "DFCE0C4549DF8777",
            "0000000000000000",
        ),
        // set #4 vec #82
        (
            "00000000000000000000200000000000",
            "87864F1B7F7D9B3C",
            "0000000000000000",
        ),
        // set #4 vec #83
        (
            "00000000000000000000100000000000",
            "496474B33E692EA8",
            "0000000000000000",
        ),
        // set #4 vec #84
        (
            "00000000000000000000080000000000",
            "613C9DDB7584D351",
            "0000000000000000",
        ),
        // set #4 vec #85
        (
            "00000000000000000000040000000000",
            "B424986C4A45DE1F",
            "0000000000000000",
        ),
        // set #4 vec #86
        (
            "00000000000000000000020000000000",
            "79617450B29625E5",
            "0000000000000000",
        ),
        // set #4 vec #87
        (
            "00000000000000000000010000000000",
            "10FAE67A06BE74BC",
            "0000000000000000",
        ),
        // set #4 vec #88
        (
            "00000000000000000000008000000000",
            "61DFDDE0B3C8743B",
            "0000000000000000",
        ),
        // set #4 vec #89
        (
            "00000000000000000000004000000000",
            "EBCE59F6968AD303",
            "0000000000000000",
        ),
        // set #4 vec #90
        (
            "00000000000000000000002000000000",
            "A2EA265E962DF396",
            "0000000000000000",
        ),
        // set #4 vec #91
        (
            "00000000000000000000001000000000",
            "940AFCE55582043A",
            "0000000000000000",
        ),
        // set #4 vec #92
        (
            "00000000000000000000000800000000",
            "86FA88D5D1184D6E",
            "0000000000000000",
        ),
        // set #4 vec #93
        (
            "00000000000000000000000400000000",
            "E0B93AC54119D29D",
            "0000000000000000",
        ),
        // set #4 vec #94
        (
            "00000000000000000000000200000000",
            "FBF94AC756AE7E3E",
            "0000000000000000",
        ),
        // set #4 vec #95
        (
            "00000000000000000000000100000000",
            "91DA094FB91254D0",
            "0000000000000000",
        ),
        // set #4 vec #96
        (
            "00000000000000000000000080000000",
            "C418564BC62BE64B",
            "0000000000000000",
        ),
        // set #4 vec #97
        (
            "00000000000000000000000040000000",
            "1BC7A80823E28724",
            "0000000000000000",
        ),
        // set #4 vec #98
        (
            "00000000000000000000000020000000",
            "A2D3D47CD1B3C83A",
            "0000000000000000",
        ),
        // set #4 vec #99
        (
            "00000000000000000000000010000000",
            "FA2C7F0BBDC77414",
            "0000000000000000",
        ),
        // set #4 vec #100
        (
            "00000000000000000000000008000000",
            "536959E78704BD73",
            "0000000000000000",
        ),
        // set #4 vec #101
        (
            "00000000000000000000000004000000",
            "E15438A6E67D8D7F",
            "0000000000000000",
        ),
        // set #4 vec #102
        (
            "00000000000000000000000002000000",
            "02D979A43DB7B547",
            "0000000000000000",
        ),
        // set #4 vec #103
        (
            "00000000000000000000000001000000",
            "224DA1E5584C406F",
            "0000000000000000",
        ),
        // set #4 vec #104
        (
            "00000000000000000000000000800000",
            "103D77FE623BFBEB",
            "0000000000000000",
        ),
        // set #4 vec #105
        (
            "00000000000000000000000000400000",
            "B1ECD218DF014789",
            "0000000000000000",
        ),
        // set #4 vec #106
        (
            "00000000000000000000000000200000",
            "97F1030235C3FA8C",
            "0000000000000000",
        ),
        // set #4 vec #107
        (
            "00000000000000000000000000100000",
            "84B6E2751BE43290",
            "0000000000000000",
        ),
        // set #4 vec #108
        (
            "00000000000000000000000000080000",
            "0BEB773C08A2EC95",
            "0000000000000000",
        ),
        // set #4 vec #109
        (
            "00000000000000000000000000040000",
            "B5AD1E3DDB0F631B",
            "0000000000000000",
        ),
        // set #4 vec #110
        (
            "00000000000000000000000000020000",
            "0BF4A92135DE646A",
            "0000000000000000",
        ),
        // set #4 vec #111
        (
            "00000000000000000000000000010000",
            "E38DEC7D1144181E",
            "0000000000000000",
        ),
        // set #4 vec #112
        (
            "00000000000000000000000000008000",
            "3E8A9855F21D989D",
            "0000000000000000",
        ),
        // set #4 vec #113
        (
            "00000000000000000000000000004000",
            "63B223B949D38E3B",
            "0000000000000000",
        ),
        // set #4 vec #114
        (
            "00000000000000000000000000002000",
            "EE96FDA16744245C",
            "0000000000000000",
        ),
        // set #4 vec #115
        (
            "00000000000000000000000000001000",
            "ECB61DEEF68C338D",
            "0000000000000000",
        ),
        // set #4 vec #116
        (
            "00000000000000000000000000000800",
            "A1FC5219097A46D9",
            "0000000000000000",
        ),
        // set #4 vec #117
        (
            "00000000000000000000000000000400",
            "54B682949E1A7885",
            "0000000000000000",
        ),
        // set #4 vec #118
        (
            "00000000000000000000000000000200",
            "2FFCBF5301ABBC50",
            "0000000000000000",
        ),
        // set #4 vec #119
        (
            "00000000000000000000000000000100",
            "D274DB6DF33B1242",
            "0000000000000000",
        ),
        // set #4 vec #120
        (
            "00000000000000000000000000000080",
            "C4A6AFD9843C04C4",
            "0000000000000000",
        ),
        // set #4 vec #121
        (
            "00000000000000000000000000000040",
            "8A75E732D7F08A4F",
            "0000000000000000",
        ),
        // set #4 vec #122
        (
            "00000000000000000000000000000020",
            "F5665301B389EEAD",
            "0000000000000000",
        ),
        // set #4 vec #123
        (
            "00000000000000000000000000000010",
            "139DEF584CE182FD",
            "0000000000000000",
        ),
        // set #4 vec #124
        (
            "00000000000000000000000000000008",
            "8B93A142AB6955FD",
            "0000000000000000",
        ),
        // set #4 vec #125
        (
            "00000000000000000000000000000004",
            "E2531402A637AA48",
            "0000000000000000",
        ),
        // set #4 vec #126
        (
            "00000000000000000000000000000002",
            "5EF33BCA31B364F1",
            "0000000000000000",
        ),
        // set #4 vec #127
        (
            "00000000000000000000000000000001",
            "75A480A25F06F461",
            "0000000000000000",
        ),
    ],
    &[
        // set #5 vec #0
        (
            "00000000000000000000000000000000",
            "7CA8149DDF353FC5",
            "8000000000000000",
        ),
        // set #5 vec #1
        (
            "00000000000000000000000000000000",
            "BE51C44EF8AEC0D0",
            "4000000000000000",
        ),
        // set #5 vec #2
        (
            "00000000000000000000000000000000",
            "58A5EF954D52DA2A",
            "2000000000000000",
        ),
        // set #5 vec #3
        (
            "00000000000000000000000000000000",
            "BF9BDA167F843F81",
            "1000000000000000",
        ),
        // set #5 vec #4
        (
            "00000000000000000000000000000000",
            "5B9E51201914AF2B",
            "0800000000000000",
        ),
        // set #5 vec #5
        (
            "00000000000000000000000000000000",
            "6C412763F715FE6D",
            "0400000000000000",
        ),
        // set #5 vec #6
        (
            "00000000000000000000000000000000",
            "C092B6A5D67C9693",
            "0200000000000000",
        ),
        // set #5 vec #7
        (
            "00000000000000000000000000000000",
            "050E7096CFC2CE4A",
            "0100000000000000",
        ),
        // set #5 vec #8
        (
            "00000000000000000000000000000000",
            "E997EBF48F281F05",
            "0080000000000000",
        ),
        // set #5 vec #9
        (
            "00000000000000000000000000000000",
            "359F5AD9BCE9129B",
            "0040000000000000",
        ),
        // set #5 vec #10
        (
            "00000000000000000000000000000000",
            "6120048579025D5A",
            "0020000000000000",
        ),
        // set #5 vec #11
        (
            "00000000000000000000000000000000",
            "996AB26E138A861D",
            "0010000000000000",
        ),
        // set #5 vec #12
        (
            "00000000000000000000000000000000",
            "C038663B420111B8",
            "0008000000000000",
        ),
        // set #5 vec #13
        (
            "00000000000000000000000000000000",
            "BB40CFB39295B9A7",
            "0004000000000000",
        ),
        // set #5 vec #14
        (
            "00000000000000000000000000000000",
            "018B1BD3D7BBE28B",
            "0002000000000000",
        ),
        // set #5 vec #15
        (
            "00000000000000000000000000000000",
            "82D2CE48D26FFA84",
            "0001000000000000",
        ),
        // set #5 vec #16
        (
            "00000000000000000000000000000000",
            "C218436A9A82C4B6",
            "0000800000000000",
        ),
        // set #5 vec #17
        (
            "00000000000000000000000000000000",
            "47C059DFFB6C0C16",
            "0000400000000000",
        ),
        // set #5 vec #18
        (
            "00000000000000000000000000000000",
            "3BF18AC2DA1CDDE5",
            "0000200000000000",
        ),
        // set #5 vec #19
        (
            "00000000000000000000000000000000",
            "308E1062D84D9116",
            "0000100000000000",
        ),
        // set #5 vec #20
        (
            "00000000000000000000000000000000",
            "D2C2057A155C8CCA",
            "0000080000000000",
        ),
        // set #5 vec #21
        (
            "00000000000000000000000000000000",
            "51A69594198EC008",
            "0000040000000000",
        ),
        // set #5 vec #22
        (
            "00000000000000000000000000000000",
            "3D4E0E6192EBB601",
            "0000020000000000",
        ),
        // set #5 vec #23
        (
            "00000000000000000000000000000000",
            "E782FC04DF9F30F7",
            "0000010000000000",
        ),
        // set #5 vec #24
        (
            "00000000000000000000000000000000",
            "228BA9D2232E8D5F",
            "0000008000000000",
        ),
        // set #5 vec #25
        (
            "00000000000000000000000000000000",
            "BAA7E7FCC40BF196",
            "0000004000000000",
        ),
        // set #5 vec #26
        (
            "00000000000000000000000000000000",
            "0A86EB7FBD0ADF83",
            "0000002000000000",
        ),
        // set #5 vec #27
        (
            "00000000000000000000000000000000",
            "F4E8BFCA757ED80B",
            "0000001000000000",
        ),
        // set #5 vec #28
        (
            "00000000000000000000000000000000",
            "46CCE1D75C1662B2",
            "0000000800000000",
        ),
        // set #5 vec #29
        (
            "00000000000000000000000000000000",
            "37015364258A58EE",
            "0000000400000000",
        ),
        // set #5 vec #30
        (
            "00000000000000000000000000000000",
            "648A9E8350170425",
            "0000000200000000",
        ),
        // set #5 vec #31
        (
            "00000000000000000000000000000000",
            "2CCDDCF1DDEFACC1",
            "0000000100000000",
        ),
        // set #5 vec #32
        (
            "00000000000000000000000000000000",
            "05128B7E65E1B92F",
            "0000000080000000",
        ),
        // set #5 vec #33
        (
            "00000000000000000000000000000000",
            "4853E0D3F086A6B3",
            "0000000040000000",
        ),
        // set #5 vec #34
        (
            "00000000000000000000000000000000",
            "AD7D260DBDA7DCEC",
            "0000000020000000",
        ),
        // set #5 vec #35
        (
            "00000000000000000000000000000000",
            "0FE9A1939C97AA85",
            "0000000010000000",
        ),
        // set #5 vec #36
        (
            "00000000000000000000000000000000",
            "DB0925FDC5F30157",
            "0000000008000000",
        ),
        // set #5 vec #37
        (
            "00000000000000000000000000000000",
            "804689EE4CFC4518",
            "0000000004000000",
        ),
        // set #5 vec #38
        (
            "00000000000000000000000000000000",
            "360E6C1FC9DBAA1D",
            "0000000002000000",
        ),
        // set #5 vec #39
        (
            "00000000000000000000000000000000",
            "3738EDBF3EFF5ED6",
            "0000000001000000",
        ),
        // set #5 vec #40
        (
            "00000000000000000000000000000000",
            "D0F9A9F669E47616",
            "0000000000800000",
        ),
        // set #5 vec #41
        (
            "00000000000000000000000000000000",
            "5F4135F597FF647C",
            "0000000000400000",
        ),
        // set #5 vec #42
        (
            "00000000000000000000000000000000",
            "AA25242EE3D97C92",
            "0000000000200000",
        ),
        // set #5 vec #43
        (
            "00000000000000000000000000000000",
            "20721C46DF7CCA30",
            "0000000000100000",
        ),
        // set #5 vec #44
        (
            "00000000000000000000000000000000",
            "7AD7FCEB606911B2",
            "0000000000080000",
        ),
        // set #5 vec #45
        (
            "00000000000000000000000000000000",
            "4F90761691852803",
            "0000000000040000",
        ),
        // set #5 vec #46
        (
            "00000000000000000000000000000000",
            "D34D636A30C06C35",
            "0000000000020000",
        ),
        // set #5 vec #47
        (
            "00000000000000000000000000000000",
            "017C4426FC399995",
            "0000000000010000",
        ),
        // set #5 vec #48
        (
            "00000000000000000000000000000000",
            "31DB1D66CA8D665C",
            "0000000000008000",
        ),
        // set #5 vec #49
        (
            "00000000000000000000000000000000",
            "8184B6C638D08432",
            "0000000000004000",
        ),
        // set #5 vec #50
        (
            "00000000000000000000000000000000",
            "0E7C80E32BACF5B2",
            "0000000000002000",
        ),
        // set #5 vec #51
        (
            "00000000000000000000000000000000",
            "5184953477B883BD",
            "0000000000001000",
        ),
        // set #5 vec #52
        (
            "00000000000000000000000000000000",
            "7D024F5D6CD65936",
            "0000000000000800",
        ),
        // set #5 vec #53
        (
            "00000000000000000000000000000000",
            "E105B432FDFBAF54",
            "0000000000000400",
        ),
        // set #5 vec #54
        (
            "00000000000000000000000000000000",
            "DAB858EDC1E27A2A",
            "0000000000000200",
        ),
        // set #5 vec #55
        (
            "00000000000000000000000000000000",
            "C2E363BFC6DED4B5",
            "0000000000000100",
        ),
        // set #5 vec #56
        (
            "00000000000000000000000000000000",
            "3F2F06D8A3F0C9F2",
            "0000000000000080",
        ),
        // set #5 vec #57
        (
            "00000000000000000000000000000000",
            "4BFD9A9AA34A3ECF",
            "0000000000000040",
        ),
        // set #5 vec #58
        (
            "00000000000000000000000000000000",
            "52EFC699F7E3CA54",
            "0000000000000020",
        ),
        // set #5 vec #59
        (
            "00000000000000000000000000000000",
            "5BD057CF8EBD7D33",
            "0000000000000010",
        ),
        // set #5 vec #60
        (
            "00000000000000000000000000000000",
            "CF263EF79C33A32E",
            "0000000000000008",
        ),
        // set #5 vec #61
        (
            "00000000000000000000000000000000",
            "58A4ED85D2228C3C",
            "0000000000000004",
        ),
        // set #5 vec #62
        (
            "00000000000000000000000000000000",
            "D2A7E327764BC19E",
            "0000000000000002",
        ),
        // set #5 vec #63
        (
            "00000000000000000000000000000000",
            "5B0380EB68F5B708",
            "0000000000000001",
        ),
    ],
    &[
        // set #6 vec #0
        (
            "00000000000000000000000000000000",
            "136CE5480FF91696",
            "0000000000000000",
        ),
        // set #6 vec #1
        (
            "01010101010101010101010101010101",
            "897FED30A1DA9689",
            "0101010101010101",
        ),
        // set #6 vec #2
        (
            "02020202020202020202020202020202",
            "147B1966F65D0C4F",
            "0202020202020202",
        ),
        // set #6 vec #3
        (
            "03030303030303030303030303030303",
            "9103441989042C85",
            "0303030303030303",
        ),
        // set #6 vec #4
        (
            "04040404040404040404040404040404",
            "D8B0A0FFE0AE0A0A",
            "0404040404040404",
        ),
        // set #6 vec #5
        (
            "05050505050505050505050505050505",
            "02D85AD79F363A6C",
            "0505050505050505",
        ),
        // set #6 vec #6
        (
            "06060606060606060606060606060606",
            "C54F92B2BB1377F3",
            "0606060606060606",
        ),
        // set #6 vec #7
        (
            "07070707070707070707070707070707",
            "7D99C490F5D8ED09",
            "0707070707070707",
        ),
        // set #6 vec #8
        (
            "08080808080808080808080808080808",
            "582077F2D7292342",
            "0808080808080808",
        ),
        // set #6 vec #9
        (
            "09090909090909090909090909090909",
            "BF5F6B7A4008F507",
            "0909090909090909",
        ),
        // set #6 vec #10
        (
            "0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A",
            "D989BEDA143D0E4D",
            "0A0A0A0A0A0A0A0A",
        ),
        // set #6 vec #11
        (
            "0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B",
            "53555B0BAC0CD6F6",
            "0B0B0B0B0B0B0B0B",
        ),
        // set #6 vec #12
        (
            "0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C",
            "15B7B44E0544F060",
            "0C0C0C0C0C0C0C0C",
        ),
        // set #6 vec #13
        (
            "0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D",
            "E4B0A09767269AA8",
            "0D0D0D0D0D0D0D0D",
        ),
        // set #6 vec #14
        (
            "0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E",
            "0BFE78F094D8553C",
            "0E0E0E0E0E0E0E0E",
        ),
        // set #6 vec #15
        (
            "0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F",
            "A443865B684B3BE3",
            "0F0F0F0F0F0F0F0F",
        ),
        // set #6 vec #16
        (
            "10101010101010101010101010101010",
            "4C1993BB5FDA0D6D",
            "1010101010101010",
        ),
        // set #6 vec #17
        (
            "11111111111111111111111111111111",
            "B26525CBAE56DD0A",
            "1111111111111111",
        ),
        // set #6 vec #18
        (
            "12121212121212121212121212121212",
            "32CECBEE6CC591FB",
            "1212121212121212",
        ),
        // set #6 vec #19
        (
            "13131313131313131313131313131313",
            "D169ACE20096E7AF",
            "1313131313131313",
        ),
        // set #6 vec #20
        (
            "14141414141414141414141414141414",
            "99EF132AF328527A",
            "1414141414141414",
        ),
        // set #6 vec #21
        (
            "15151515151515151515151515151515",
            "E84A4ADB6FFD66A1",
            "1515151515151515",
        ),
        // set #6 vec #22
        (
            "16161616161616161616161616161616",
            "3E9BEB60EDA5CC33",
            "1616161616161616",
        ),
        // set #6 vec #23
        (
            "17171717171717171717171717171717",
            "40B6AD206FA51441",
            "1717171717171717",
        ),
        // set #6 vec #24
        (
            "18181818181818181818181818181818",
            "F4E70A153599AE9B",
            "1818181818181818",
        ),
        // set #6 vec #25
        (
            "19191919191919191919191919191919",
            "10EA21C8E625D01B",
            "1919191919191919",
        ),
        // set #6 vec #26
        (
            "1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A",
            "F9976020CB4D610A",
            "1A1A1A1A1A1A1A1A",
        ),
        // set #6 vec #27
        (
            "1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B",
            "54C007DE1B2840F3",
            "1B1B1B1B1B1B1B1B",
        ),
        // set #6 vec #28
        (
            "1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C",
            "0A6B21D887299955",
            "1C1C1C1C1C1C1C1C",
        ),
        // set #6 vec #29
        (
            "1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D",
            "B7AA0D2ED9B6BFFC",
            "1D1D1D1D1D1D1D1D",
        ),
        // set #6 vec #30
        (
            "1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E",
            "2C9A162BB5F3F5CA",
            "1E1E1E1E1E1E1E1E",
        ),
        // set #6 vec #31
        (
            "1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F",
            "045E32C5D4FF4761",
            "1F1F1F1F1F1F1F1F",
        ),
        // set #6 vec #32
        (
            "20202020202020202020202020202020",
            "481443738A21A3C2",
            "2020202020202020",
        ),
        // set #6 vec #33
        (
            "21212121212121212121212121212121",
            "3B90DE54F9256FA0",
            "2121212121212121",
        ),
        // set #6 vec #34
        (
            "22222222222222222222222222222222",
            "466DB2CCD2586442",
            "2222222222222222",
        ),
        // set #6 vec #35
        (
            "23232323232323232323232323232323",
            "1E8221F7C2567E62",
            "2323232323232323",
        ),
        // set #6 vec #36
        (
            "24242424242424242424242424242424",
            "03F6CF6B9460C339",
            "2424242424242424",
        ),
        // set #6 vec #37
        (
            "25252525252525252525252525252525",
            "F638D6523F527C57",
            "2525252525252525",
        ),
        // set #6 vec #38
        (
            "26262626262626262626262626262626",
            "85A475F613497027",
            "2626262626262626",
        ),
        // set #6 vec #39
        (
            "27272727272727272727272727272727",
            "FFF013E38A5BFC2B",
            "2727272727272727",
        ),
        // set #6 vec #40
        (
            "28282828282828282828282828282828",
            "85DD9940D613F240",
            "2828282828282828",
        ),
        // set #6 vec #41
        (
            "29292929292929292929292929292929",
            "DB32CD2E2398EC2B",
            "2929292929292929",
        ),
        // set #6 vec #42
        (
            "2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A",
            "AD61385C94D2996B",
            "2A2A2A2A2A2A2A2A",
        ),
        // set #6 vec #43
        (
            "2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B",
            "79CBB9671518564B",
            "2B2B2B2B2B2B2B2B",
        ),
        // set #6 vec #44
        (
            "2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C",
            "14B853B7BFA36D6C",
            "2C2C2C2C2C2C2C2C",
        ),
        // set #6 vec #45
        (
            "2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D",
            "7823AB80F5E6D499",
            "2D2D2D2D2D2D2D2D",
        ),
        // set #6 vec #46
        (
            "2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E",
            "5CF6DEA6FB3B5732",
            "2E2E2E2E2E2E2E2E",
        ),
        // set #6 vec #47
        (
            "2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F",
            "CC00D31E5847F7DF",
            "2F2F2F2F2F2F2F2F",
        ),
        // set #6 vec #48
        (
            "30303030303030303030303030303030",
            "47ACA927ECF96EE0",
            "3030303030303030",
        ),
        // set #6 vec #49
        (
            "31313131313131313131313131313131",
            "A165DA466B24E1B4",
            "3131313131313131",
        ),
        // set #6 vec #50
        (
            "32323232323232323232323232323232",
            "D023D0ECB79925F6",
            "3232323232323232",
        ),
        // set #6 vec #51
        (
            "33333333333333333333333333333333",
            "11315F986DC2DA77",
            "3333333333333333",
        ),
        // set #6 vec #52
        (
            "34343434343434343434343434343434",
            "81945C7A0E8CFA2B",
            "3434343434343434",
        ),
        // set #6 vec #53
        (
            "35353535353535353535353535353535",
            "11117AC15FC33735",
            "3535353535353535",
        ),
        // set #6 vec #54
        (
            "36363636363636363636363636363636",
            "61626D41FE2E391E",
            "3636363636363636",
        ),
        // set #6 vec #55
        (
            "37373737373737373737373737373737",
            "B2CD8FC35180809D",
            "3737373737373737",
        ),
        // set #6 vec #56
        (
            "38383838383838383838383838383838",
            "3D3A363C62B138F2",
            "3838383838383838",
        ),
        // set #6 vec #57
        (
            "39393939393939393939393939393939",
            "AE15590E8A135F01",
            "3939393939393939",
        ),
        // set #6 vec #58
        (
            "3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A",
            "5FE3CE75D6D0E634",
            "3A3A3A3A3A3A3A3A",
        ),
        // set #6 vec #59
        (
            "3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B",
            "516DA781993CB31C",
            "3B3B3B3B3B3B3B3B",
        ),
        // set #6 vec #60
        (
            "3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C",
            "A79D87587C1AD201",
            "3C3C3C3C3C3C3C3C",
        ),
        // set #6 vec #61
        (
            "3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D",
            "12BC868B060AADDC",
            "3D3D3D3D3D3D3D3D",
        ),
        // set #6 vec #62
        (
            "3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E",
            "E313C2CE1C0FDD82",
            "3E3E3E3E3E3E3E3E",
        ),
        // set #6 vec #63
        (
            "3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F",
            "2824A8F4C3729AEE",
            "3F3F3F3F3F3F3F3F",
        ),
        // set #6 vec #64
        (
            "40404040404040404040404040404040",
            "3DD725C4B2005A8E",
            "4040404040404040",
        ),
        // set #6 vec #65
        (
            "41414141414141414141414141414141",
            "F268235807A22F45",
            "4141414141414141",
        ),
        // set #6 vec #66
        (
            "42424242424242424242424242424242",
            "1ADB4BE0D67EB0D1",
            "4242424242424242",
        ),
        // set #6 vec #67
        (
            "43434343434343434343434343434343",
            "E8AA94054BF7AEF9",
            "4343434343434343",
        ),
        // set #6 vec #68
        (
            "44444444444444444444444444444444",
            "43E28CF9A925DE6E",
            "4444444444444444",
        ),
        // set #6 vec #69
        (
            "45454545454545454545454545454545",
            "2A23806AAAF703E8",
            "4545454545454545",
        ),
        // set #6 vec #70
        (
            "46464646464646464646464646464646",
            "38C52938D47F7DEE",
            "4646464646464646",
        ),
        // set #6 vec #71
        (
            "47474747474747474747474747474747",
            "38CBF3F1AEE1A69A",
            "4747474747474747",
        ),
        // set #6 vec #72
        (
            "48484848484848484848484848484848",
            "E6BEEFB0751332DB",
            "4848484848484848",
        ),
        // set #6 vec #73
        (
            "49494949494949494949494949494949",
            "3BA42C1881243426",
            "4949494949494949",
        ),
        // set #6 vec #74
        (
            "4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A",
            "63D2BAE756AB2FF2",
            "4A4A4A4A4A4A4A4A",
        ),
        // set #6 vec #75
        (
            "4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B",
            "06C9F80544D4DBE2",
            "4B4B4B4B4B4B4B4B",
        ),
        // set #6 vec #76
        (
            "4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C",
            "A464F98CF432B6B4",
            "4C4C4C4C4C4C4C4C",
        ),
        // set #6 vec #77
        (
            "4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D",
            "676E3C630D8B3BB7",
            "4D4D4D4D4D4D4D4D",
        ),
        // set #6 vec #78
        (
            "4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E",
            "3FE3D54DA7BBEF8F",
            "4E4E4E4E4E4E4E4E",
        ),
        // set #6 vec #79
        (
            "4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F",
            "D51E9F223C1CBC1B",
            "4F4F4F4F4F4F4F4F",
        ),
        // set #6 vec #80
        (
            "50505050505050505050505050505050",
            "32DF00079847FA8E",
            "5050505050505050",
        ),
        // set #6 vec #81
        (
            "51515151515151515151515151515151",
            "785D2A64D7A4538D",
            "5151515151515151",
        ),
        // set #6 vec #82
        (
            "52525252525252525252525252525252",
            "A1040EF90D472E7F",
            "5252525252525252",
        ),
        // set #6 vec #83
        (
            "53535353535353535353535353535353",
            "11B2DF0AC2C5B0AE",
            "5353535353535353",
        ),
        // set #6 vec #84
        (
            "54545454545454545454545454545454",
            "2FFAFF07219D6D7C",
            "5454545454545454",
        ),
        // set #6 vec #85
        (
            "55555555555555555555555555555555",
            "C9530E6F6CCFF2EF",
            "5555555555555555",
        ),
        // set #6 vec #86
        (
            "56565656565656565656565656565656",
            "96A5CD9BFC042E39",
            "5656565656565656",
        ),
        // set #6 vec #87
        (
            "57575757575757575757575757575757",
            "F77F7B6F4F84F1FF",
            "5757575757575757",
        ),
        // set #6 vec #88
        (
            "58585858585858585858585858585858",
            "C0532C3D69C062DF",
            "5858585858585858",
        ),
        // set #6 vec #89
        (
            "59595959595959595959595959595959",
            "E7FFAEA69C8A8607",
            "5959595959595959",
        ),
        // set #6 vec #90
        (
            "5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A",
            "F2FC664DAE182ADD",
            "5A5A5A5A5A5A5A5A",
        ),
        // set #6 vec #91
        (
            "5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B",
            "41FC38F84E4C0195",
            "5B5B5B5B5B5B5B5B",
        ),
        // set #6 vec #92
        (
            "5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C",
            "4A9930C76F50684C",
            "5C5C5C5C5C5C5C5C",
        ),
        // set #6 vec #93
        (
            "5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D",
            "EEAC0DA9060DA9B0",
            "5D5D5D5D5D5D5D5D",
        ),
        // set #6 vec #94
        (
            "5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E",
            "F6840282D75D02E7",
            "5E5E5E5E5E5E5E5E",
        ),
        // set #6 vec #95
        (
            "5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F",
            "821AEA19D5B63E83",
            "5F5F5F5F5F5F5F5F",
        ),
        // set #6 vec #96
        (
            "60606060606060606060606060606060",
            "727CF728A7B13ABC",
            "6060606060606060",
        ),
        // set #6 vec #97
        (
            "61616161616161616161616161616161",
            "A67998D29C473F12",
            "6161616161616161",
        ),
        // set #6 vec #98
        (
            "62626262626262626262626262626262",
            "EFFA49D2160B4ABF",
            "6262626262626262",
        ),
        // set #6 vec #99
        (
            "63636363636363636363636363636363",
            "164D73FE681E75AD",
            "6363636363636363",
        ),
        // set #6 vec #100
        (
            "64646464646464646464646464646464",
            "2B1C04D997DA7FD4",
            "6464646464646464",
        ),
        // set #6 vec #101
        (
            "65656565656565656565656565656565",
            "31A11FBEE25E09E4",
            "6565656565656565",
        ),
        // set #6 vec #102
        (
            "66666666666666666666666666666666",
            "1DB54D4519ACF873",
            "6666666666666666",
        ),
        // set #6 vec #103
        (
            "67676767676767676767676767676767",
            "E216D9E2C99B66BB",
            "6767676767676767",
        ),
        // set #6 vec #104
        (
            "68686868686868686868686868686868",
            "44753BA9A3B99529",
            "6868686868686868",
        ),
        // set #6 vec #105
        (
            "69696969696969696969696969696969",
            "67BAC169DF8C9466",
            "6969696969696969",
        ),
        // set #6 vec #106
        (
            "6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A",
            "A3F0FFD1635558D9",
            "6A6A6A6A6A6A6A6A",
        ),
        // set #6 vec #107
        (
            "6B6B6B6B6B6B6B6B6B6B6B6B6B6B6B6B",
            "E067EA6903BC9E75",
            "6B6B6B6B6B6B6B6B",
        ),
        // set #6 vec #108
        (
            "6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C",
            "CC9B2A2EE146C976",
            "6C6C6C6C6C6C6C6C",
        ),
        // set #6 vec #109
        (
            "6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D",
            "B8188AE524A48DB5",
            "6D6D6D6D6D6D6D6D",
        ),
        // set #6 vec #110
        (
            "6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E",
            "EA63A02FDD241BD4",
            "6E6E6E6E6E6E6E6E",
        ),
        // set #6 vec #111
        (
            "6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F",
            "0527909BC5643183",
            "6F6F6F6F6F6F6F6F",
        ),
        // set #6 vec #112
        (
            "70707070707070707070707070707070",
            "F18ABDE9ED0AB894",
            "7070707070707070",
        ),
        // set #6 vec #113
        (
            "71717171717171717171717171717171",
            "3920A8E7A3FB6806",
            "7171717171717171",
        ),
        // set #6 vec #114
        (
            "72727272727272727272727272727272",
            "C6524384CE47C55B",
            "7272727272727272",
        ),
        // set #6 vec #115
        (
            "73737373737373737373737373737373",
            "BDD7DCB1656BAADD",
            "7373737373737373",
        ),
        // set #6 vec #116
        (
            "74747474747474747474747474747474",
            "6673C63C62C8719A",
            "7474747474747474",
        ),
        // set #6 vec #117
        (
            "75757575757575757575757575757575",
            "19DA69B57FFD0157",
            "7575757575757575",
        ),
        // set #6 vec #118
        (
            "76767676767676767676767676767676",
            "85754A52326E6EA6",
            "7676767676767676",
        ),
        // set #6 vec #119
        (
            "77777777777777777777777777777777",
            "C27D329D88AD15BC",
            "7777777777777777",
        ),
        // set #6 vec #120
        (
            "78787878787878787878787878787878",
            "7A872514E97BFB69",
            "7878787878787878",
        ),
        // set #6 vec #121
        (
            "79797979797979797979797979797979",
            "70947B68A327C173",
            "7979797979797979",
        ),
        // set #6 vec #122
        (
            "7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A",
            "68FDC0234147414C",
            "7A7A7A7A7A7A7A7A",
        ),
        // set #6 vec #123
        (
            "7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B",
            "70A314ED65B8E243",
            "7B7B7B7B7B7B7B7B",
        ),
        // set #6 vec #124
        (
            "7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C",
            "E59BB841DE09A039",
            "7C7C7C7C7C7C7C7C",
        ),
        // set #6 vec #125
        (
            "7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D",
            "4C883F03047CB576",
            "7D7D7D7D7D7D7D7D",
        ),
        // set #6 vec #126
        (
            "7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E",
            "7F95787EC5BCD074",
            "7E7E7E7E7E7E7E7E",
        ),
        // set #6 vec #127
        (
            "7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F",
            "E95AB35ABF1EBA68",
            "7F7F7F7F7F7F7F7F",
        ),
        // set #6 vec #128
        (
            "80808080808080808080808080808080",
            "F22B876C1ECDB9FF",
            "8080808080808080",
        ),
        // set #6 vec #129
        (
            "81818181818181818181818181818181",
            "3654F54F17C46A6A",
            "8181818181818181",
        ),
        // set #6 vec #130
        (
            "82828282828282828282828282828282",
            "B0ECC03F07D4D507",
            "8282828282828282",
        ),
        // set #6 vec #131
        (
            "83838383838383838383838383838383",
            "4CD623BF7B162E37",
            "8383838383838383",
        ),
        // set #6 vec #132
        (
            "84848484848484848484848484848484",
            "483BE29083971AFB",
            "8484848484848484",
        ),
        // set #6 vec #133
        (
            "85858585858585858585858585858585",
            "701CC2F4CF5FC80D",
            "8585858585858585",
        ),
        // set #6 vec #134
        (
            "86868686868686868686868686868686",
            "7F736C27F3E1283B",
            "8686868686868686",
        ),
        // set #6 vec #135
        (
            "87878787878787878787878787878787",
            "83D7F7FADDB57589",
            "8787878787878787",
        ),
        // set #6 vec #136
        (
            "88888888888888888888888888888888",
            "EEE69D2621126076",
            "8888888888888888",
        ),
        // set #6 vec #137
        (
            "89898989898989898989898989898989",
            "9F0EA1DF5C4060F7",
            "8989898989898989",
        ),
        // set #6 vec #138
        (
            "8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A",
            "8F0B10F7B81CD40C",
            "8A8A8A8A8A8A8A8A",
        ),
        // set #6 vec #139
        (
            "8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B",
            "B1BF72A385600BB0",
            "8B8B8B8B8B8B8B8B",
        ),
        // set #6 vec #140
        (
            "8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C",
            "9AE34503D87141FE",
            "8C8C8C8C8C8C8C8C",
        ),
        // set #6 vec #141
        (
            "8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D",
            "BD0FFBD3224B6D2F",
            "8D8D8D8D8D8D8D8D",
        ),
        // set #6 vec #142
        (
            "8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E",
            "B30733F1009479E0",
            "8E8E8E8E8E8E8E8E",
        ),
        // set #6 vec #143
        (
            "8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F",
            "F8F71034399810BB",
            "8F8F8F8F8F8F8F8F",
        ),
        // set #6 vec #144
        (
            "90909090909090909090909090909090",
            "11C23132C318BB63",
            "9090909090909090",
        ),
        // set #6 vec #145
        (
            "91919191919191919191919191919191",
            "C302F8825A5022AF",
            "9191919191919191",
        ),
        // set #6 vec #146
        (
            "92929292929292929292929292929292",
            "2AEEFC0A4397C732",
            "9292929292929292",
        ),
        // set #6 vec #147
        (
            "93939393939393939393939393939393",
            "612BC1CF7F2FCECD",
            "9393939393939393",
        ),
        // set #6 vec #148
        (
            "94949494949494949494949494949494",
            "5D67AE0C5D1EC645",
            "9494949494949494",
        ),
        // set #6 vec #149
        (
            "95959595959595959595959595959595",
            "DDD47850BB2663D8",
            "9595959595959595",
        ),
        // set #6 vec #150
        (
            "96969696969696969696969696969696",
            "77D2BA6E946F013C",
            "9696969696969696",
        ),
        // set #6 vec #151
        (
            "97979797979797979797979797979797",
            "B0EEE30FFE4934B4",
            "9797979797979797",
        ),
        // set #6 vec #152
        (
            "98989898989898989898989898989898",
            "B756AD4D267C10C2",
            "9898989898989898",
        ),
        // set #6 vec #153
        (
            "99999999999999999999999999999999",
            "A58CC037EE8BBF57",
            "9999999999999999",
        ),
        // set #6 vec #154
        (
            "9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A",
            "65ED097D4D5FDA56",
            "9A9A9A9A9A9A9A9A",
        ),
        // set #6 vec #155
        (
            "9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B",
            "8E85677FA0A26747",
            "9B9B9B9B9B9B9B9B",
        ),
        // set #6 vec #156
        (
            "9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C",
            "56BB2820153BACEA",
            "9C9C9C9C9C9C9C9C",
        ),
        // set #6 vec #157
        (
            "9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D",
            "C0B9DA3E1B638A6F",
            "9D9D9D9D9D9D9D9D",
        ),
        // set #6 vec #158
        (
            "9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E",
            "167CC1878F3D3C46",
            "9E9E9E9E9E9E9E9E",
        ),
        // set #6 vec #159
        (
            "9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F",
            "B84C4230FC84CE09",
            "9F9F9F9F9F9F9F9F",
        ),
        // set #6 vec #160
        (
            "A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0",
            "A02196345EA22560",
            "A0A0A0A0A0A0A0A0",
        ),
        // set #6 vec #161
        (
            "A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1",
            "307CAE08CF13AFA6",
            "A1A1A1A1A1A1A1A1",
        ),
        // set #6 vec #162
        (
            "A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2",
            "7DF2192FD40928CD",
            "A2A2A2A2A2A2A2A2",
        ),
        // set #6 vec #163
        (
            "A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3",
            "B847D93AFAAD8144",
            "A3A3A3A3A3A3A3A3",
        ),
        // set #6 vec #164
        (
            "A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4",
            "7508580B05BB793F",
            "A4A4A4A4A4A4A4A4",
        ),
        // set #6 vec #165
        (
            "A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5",
            "68B3188BB5B69EC7",
            "A5A5A5A5A5A5A5A5",
        ),
        // set #6 vec #166
        (
            "A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6",
            "6FAB0F00727F11F7",
            "A6A6A6A6A6A6A6A6",
        ),
        // set #6 vec #167
        (
            "A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7",
            "D724B2E288D9153E",
            "A7A7A7A7A7A7A7A7",
        ),
        // set #6 vec #168
        (
            "A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8",
            "D4D51E1492268172",
            "A8A8A8A8A8A8A8A8",
        ),
        // set #6 vec #169
        (
            "A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9",
            "FFC21A8C832F5987",
            "A9A9A9A9A9A9A9A9",
        ),
        // set #6 vec #170
        (
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            "56F102DA5D9A7AA8",
            "AAAAAAAAAAAAAAAA",
        ),
        // set #6 vec #171
        (
            "ABABABABABABABABABABABABABABABAB",
            "6780A54020175076",
            "ABABABABABABABAB",
        ),
        // set #6 vec #172
        (
            "ACACACACACACACACACACACACACACACAC",
            "BC4054D85F27089E",
            "ACACACACACACACAC",
        ),
        // set #6 vec #173
        (
            "ADADADADADADADADADADADADADADADAD",
            "BBE08468327A7E65",
            "ADADADADADADADAD",
        ),
        // set #6 vec #174
        (
            "AEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE",
            "87796445B0586B6D",
            "AEAEAEAEAEAEAEAE",
        ),
        // set #6 vec #175
        (
            "AFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF",
            "9D15A78088E7AD57",
            "AFAFAFAFAFAFAFAF",
        ),
        // set #6 vec #176
        (
            "B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0",
            "1A40AB7EA5E7ED74",
            "B0B0B0B0B0B0B0B0",
        ),
        // set #6 vec #177
        (
            "B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1",
            "BDD5962B23D1A361",
            "B1B1B1B1B1B1B1B1",
        ),
        // set #6 vec #178
        (
            "B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2",
            "0E812C7CDF85CE3F",
            "B2B2B2B2B2B2B2B2",
        ),
        // set #6 vec #179
        (
            "B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3",
            "81D25575E20E8F34",
            "B3B3B3B3B3B3B3B3",
        ),
        // set #6 vec #180
        (
            "B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4",
            "DD6B8D22ADE8CD4C",
            "B4B4B4B4B4B4B4B4",
        ),
        // set #6 vec #181
        (
            "B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5",
            "CA17CB30156A42F1",
            "B5B5B5B5B5B5B5B5",
        ),
        // set #6 vec #182
        (
            "B6B6B6B6B6B6B6B6B6B6B6B6B6B6B6B6",
            "67FD429E20A83731",
            "B6B6B6B6B6B6B6B6",
        ),
        // set #6 vec #183
        (
            "B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7",
            "E66F3F7260B06927",
            "B7B7B7B7B7B7B7B7",
        ),
        // set #6 vec #184
        (
            "B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8",
            "3608E9A96B3293DA",
            "B8B8B8B8B8B8B8B8",
        ),
        // set #6 vec #185
        (
            "B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9",
            "BEDCE27EBCC657D0",
            "B9B9B9B9B9B9B9B9",
        ),
        // set #6 vec #186
        (
            "BABABABABABABABABABABABABABABABA",
            "B4D036C9CDC6F55C",
            "BABABABABABABABA",
        ),
        // set #6 vec #187
        (
            "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            "99A0C2BA75156E89",
            "BBBBBBBBBBBBBBBB",
        ),
        // set #6 vec #188
        (
            "BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC",
            "EC76B130BD72425F",
            "BCBCBCBCBCBCBCBC",
        ),
        // set #6 vec #189
        (
            "BDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBD",
            "44D5E7932913B966",
            "BDBDBDBDBDBDBDBD",
        ),
        // set #6 vec #190
        (
            "BEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBE",
            "90BFB97A5A4B9C82",
            "BEBEBEBEBEBEBEBE",
        ),
        // set #6 vec #191
        (
            "BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF",
            "42DB3DA55C91DCDA",
            "BFBFBFBFBFBFBFBF",
        ),
        // set #6 vec #192
        (
            "C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0",
            "D22E3BCA3ED732E7",
            "C0C0C0C0C0C0C0C0",
        ),
        // set #6 vec #193
        (
            "C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1",
            "73C2DAB1EE8CD6A3",
            "C1C1C1C1C1C1C1C1",
        ),
        // set #6 vec #194
        (
            "C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2",
            "9A2AA75B7ADB74D9",
            "C2C2C2C2C2C2C2C2",
        ),
        // set #6 vec #195
        (
            "C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3",
            "C2189636A8B2EE27",
            "C3C3C3C3C3C3C3C3",
        ),
        // set #6 vec #196
        (
            "C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4",
            "84A15B5E1F72B10B",
            "C4C4C4C4C4C4C4C4",
        ),
        // set #6 vec #197
        (
            "C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5",
            "1892AF1539C08351",
            "C5C5C5C5C5C5C5C5",
        ),
        // set #6 vec #198
        (
            "C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6",
            "4CD04F8AE185ADE8",
            "C6C6C6C6C6C6C6C6",
        ),
        // set #6 vec #199
        (
            "C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7",
            "B88080128854240A",
            "C7C7C7C7C7C7C7C7",
        ),
        // set #6 vec #200
        (
            "C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8",
            "781620284E9B955C",
            "C8C8C8C8C8C8C8C8",
        ),
        // set #6 vec #201
        (
            "C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9",
            "B27B540A60E159E1",
            "C9C9C9C9C9C9C9C9",
        ),
        // set #6 vec #202
        (
            "CACACACACACACACACACACACACACACACA",
            "2F9014EE256DA94B",
            "CACACACACACACACA",
        ),
        // set #6 vec #203
        (
            "CBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCB",
            "4A753E67BC9621A1",
            "CBCBCBCBCBCBCBCB",
        ),
        // set #6 vec #204
        (
            "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC",
            "C98B9332366E265B",
            "CCCCCCCCCCCCCCCC",
        ),
        // set #6 vec #205
        (
            "CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD",
            "25A33EF44ED81C7E",
            "CDCDCDCDCDCDCDCD",
        ),
        // set #6 vec #206
        (
            "CECECECECECECECECECECECECECECECE",
            "EA6791E95F8B0982",
            "CECECECECECECECE",
        ),
        // set #6 vec #207
        (
            "CFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCF",
            "4A830F808045DEE0",
            "CFCFCFCFCFCFCFCF",
        ),
        // set #6 vec #208
        (
            "D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0",
            "26015282CBB968D2",
            "D0D0D0D0D0D0D0D0",
        ),
        // set #6 vec #209
        (
            "D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1",
            "978AAEAFFC7CF149",
            "D1D1D1D1D1D1D1D1",
        ),
        // set #6 vec #210
        (
            "D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2",
            "27F0F833368E3192",
            "D2D2D2D2D2D2D2D2",
        ),
        // set #6 vec #211
        (
            "D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3",
            "B091D63FC3EE8F60",
            "D3D3D3D3D3D3D3D3",
        ),
        // set #6 vec #212
        (
            "D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4",
            "1ECF45D9BD03E580",
            "D4D4D4D4D4D4D4D4",
        ),
        // set #6 vec #213
        (
            "D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5",
            "6CB29F047F8D0300",
            "D5D5D5D5D5D5D5D5",
        ),
        // set #6 vec #214
        (
            "D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6",
            "BD2E9C0D23924C99",
            "D6D6D6D6D6D6D6D6",
        ),
        // set #6 vec #215
        (
            "D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7",
            "43578FEA1ED1C6CF",
            "D7D7D7D7D7D7D7D7",
        ),
        // set #6 vec #216
        (
            "D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8",
            "63F3226A1A7817D9",
            "D8D8D8D8D8D8D8D8",
        ),
        // set #6 vec #217
        (
            "D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9",
            "CDEDDB44EF710FD2",
            "D9D9D9D9D9D9D9D9",
        ),
        // set #6 vec #218
        (
            "DADADADADADADADADADADADADADADADA",
            "30D0BD14ED85EE31",
            "DADADADADADADADA",
        ),
        // set #6 vec #219
        (
            "DBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDB",
            "657BA527EF9B870C",
            "DBDBDBDBDBDBDBDB",
        ),
        // set #6 vec #220
        (
            "DCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC",
            "030CBBF95DDD8224",
            "DCDCDCDCDCDCDCDC",
        ),
        // set #6 vec #221
        (
            "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD",
            "E5CD1D3E9C403524",
            "DDDDDDDDDDDDDDDD",
        ),
        // set #6 vec #222
        (
            "DEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDE",
            "D134D5F60390A498",
            "DEDEDEDEDEDEDEDE",
        ),
        // set #6 vec #223
        (
            "DFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDF",
            "0CFCCF97E4F7D038",
            "DFDFDFDFDFDFDFDF",
        ),
        // set #6 vec #224
        (
            "E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0",
            "BA9C2BBD5D5A1495",
            "E0E0E0E0E0E0E0E0",
        ),
        // set #6 vec #225
        (
            "E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1",
            "F51126E8E1BA2F8D",
            "E1E1E1E1E1E1E1E1",
        ),
        // set #6 vec #226
        (
            "E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2",
            "D3618A49AD3083E9",
            "E2E2E2E2E2E2E2E2",
        ),
        // set #6 vec #227
        (
            "E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3",
            "A034BB5039D555D9",
            "E3E3E3E3E3E3E3E3",
        ),
        // set #6 vec #228
        (
            "E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4",
            "28AFAA9D029E3583",
            "E4E4E4E4E4E4E4E4",
        ),
        // set #6 vec #229
        (
            "E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5",
            "D7853194605A1230",
            "E5E5E5E5E5E5E5E5",
        ),
        // set #6 vec #230
        (
            "E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6",
            "863D99CE2EAC4A10",
            "E6E6E6E6E6E6E6E6",
        ),
        // set #6 vec #231
        (
            "E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7",
            "E5A73FE05FB3C502",
            "E7E7E7E7E7E7E7E7",
        ),
        // set #6 vec #232
        (
            "E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8",
            "79EB5E84A51C1F24",
            "E8E8E8E8E8E8E8E8",
        ),
        // set #6 vec #233
        (
            "E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9",
            "862A2C3457BBAB00",
            "E9E9E9E9E9E9E9E9",
        ),
        // set #6 vec #234
        (
            "EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA",
            "B164956C9F1ED5E2",
            "EAEAEAEAEAEAEAEA",
        ),
        // set #6 vec #235
        (
            "EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB",
            "782BF6EF6C829257",
            "EBEBEBEBEBEBEBEB",
        ),
        // set #6 vec #236
        (
            "ECECECECECECECECECECECECECECECEC",
            "F4DDD623FB85B25A",
            "ECECECECECECECEC",
        ),
        // set #6 vec #237
        (
            "EDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED",
            "982FFABFD14C2690",
            "EDEDEDEDEDEDEDED",
        ),
        // set #6 vec #238
        (
            "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE",
            "3D32AE605C63EBC2",
            "EEEEEEEEEEEEEEEE",
        ),
        // set #6 vec #239
        (
            "EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF",
            "41F3B5B0A1485AB8",
            "EFEFEFEFEFEFEFEF",
        ),
        // set #6 vec #240
        (
            "F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0",
            "DEB571F6A195048F",
            "F0F0F0F0F0F0F0F0",
        ),
        // set #6 vec #241
        (
            "F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1",
            "91FEDFCED18795E3",
            "F1F1F1F1F1F1F1F1",
        ),
        // set #6 vec #242
        (
            "F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2",
            "5A5EE798C55A8399",
            "F2F2F2F2F2F2F2F2",
        ),
        // set #6 vec #243
        (
            "F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3",
            "C0A4826159F2B9A0",
            "F3F3F3F3F3F3F3F3",
        ),
        // set #6 vec #244
        (
            "F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4",
            "4E77BA934333E45B",
            "F4F4F4F4F4F4F4F4",
        ),
        // set #6 vec #245
        (
            "F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5",
            "5BC11AA405291687",
            "F5F5F5F5F5F5F5F5",
        ),
        // set #6 vec #246
        (
            "F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6",
            "BD46B19A56B2B675",
            "F6F6F6F6F6F6F6F6",
        ),
        // set #6 vec #247
        (
            "F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7",
            "81521348DD433FD3",
            "F7F7F7F7F7F7F7F7",
        ),
        // set #6 vec #248
        (
            "F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8",
            "55DC9EC852ABFCB5",
            "F8F8F8F8F8F8F8F8",
        ),
        // set #6 vec #249
        (
            "F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9",
            "FF90A91E8937D349",
            "F9F9F9F9F9F9F9F9",
        ),
        // set #6 vec #250
        (
            "FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFA",
            "B4530853332F0692",
            "FAFAFAFAFAFAFAFA",
        ),
        // set #6 vec #251
        (
            "FBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB",
            "DF83E2BD645BD45B",
            "FBFBFBFBFBFBFBFB",
        ),
        // set #6 vec #252
        (
            "FCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFC",
            "2C922D161D0BEAF0",
            "FCFCFCFCFCFCFCFC",
        ),
        // set #6 vec #253
        (
            "FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFD",
            "B150869F15B5864D",
            "FDFDFDFDFDFDFDFD",
        ),
        // set #6 vec #254
        (
            "FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE",
            "75B22991A49E4847",
            "FEFEFEFEFEFEFEFE",
        ),
        // set #6 vec #255
        (
            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
            "6ED5F3BDDAACD163",
            "FFFFFFFFFFFFFFFF",
        ),
    ],
    &[
        // set #7 vec #0
        (
            "000102030405060708090A0B0C0D0E0F",
            "96950DDA654A3D62",
            "0011223344556677",
        ),
        // set #7 vec #1
        (
            "2BD6459F82C5B300952C49104881FF48",
            "638B3A5EF72B663F",
            "EA024714AD5C4D84",
        ),
    ],
];

// Set #2 (256 vectors)
// vec #0
#[test]
fn nessie_2_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_2_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #2
#[test]
fn nessie_2_2() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][2];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #3
#[test]
fn nessie_2_3() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][3];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #4
#[test]
fn nessie_2_4() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][4];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #5
#[test]
fn nessie_2_5() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][5];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #6
#[test]
fn nessie_2_6() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][6];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #7
#[test]
fn nessie_2_7() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][7];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #8
#[test]
fn nessie_2_8() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][8];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #9
#[test]
fn nessie_2_9() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][9];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #10
#[test]
fn nessie_2_10() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][10];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #11
#[test]
fn nessie_2_11() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][11];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #12
#[test]
fn nessie_2_12() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][12];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #13
#[test]
fn nessie_2_13() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][13];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #14
#[test]
fn nessie_2_14() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][14];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #15
#[test]
fn nessie_2_15() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][15];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #16
#[test]
fn nessie_2_16() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][16];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #17
#[test]
fn nessie_2_17() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][17];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #18
#[test]
fn nessie_2_18() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][18];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #19
#[test]
fn nessie_2_19() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][19];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #20
#[test]
fn nessie_2_20() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][20];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #21
#[test]
fn nessie_2_21() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][21];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #22
#[test]
fn nessie_2_22() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][22];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #23
#[test]
fn nessie_2_23() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][23];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #24
#[test]
fn nessie_2_24() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][24];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #25
#[test]
fn nessie_2_25() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][25];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #26
#[test]
fn nessie_2_26() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][26];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #27
#[test]
fn nessie_2_27() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][27];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #28
#[test]
fn nessie_2_28() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][28];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #29
#[test]
fn nessie_2_29() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][29];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #30
#[test]
fn nessie_2_30() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][30];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #31
#[test]
fn nessie_2_31() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][31];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #32
#[test]
fn nessie_2_32() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][32];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #33
#[test]
fn nessie_2_33() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][33];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #34
#[test]
fn nessie_2_34() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][34];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #35
#[test]
fn nessie_2_35() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][35];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #36
#[test]
fn nessie_2_36() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][36];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #37
#[test]
fn nessie_2_37() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][37];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #38
#[test]
fn nessie_2_38() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][38];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #39
#[test]
fn nessie_2_39() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][39];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #40
#[test]
fn nessie_2_40() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][40];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #41
#[test]
fn nessie_2_41() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][41];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #42
#[test]
fn nessie_2_42() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][42];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #43
#[test]
fn nessie_2_43() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][43];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #44
#[test]
fn nessie_2_44() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][44];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #45
#[test]
fn nessie_2_45() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][45];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #46
#[test]
fn nessie_2_46() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][46];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #47
#[test]
fn nessie_2_47() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][47];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #48
#[test]
fn nessie_2_48() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][48];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #49
#[test]
fn nessie_2_49() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][49];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #50
#[test]
fn nessie_2_50() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][50];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #51
#[test]
fn nessie_2_51() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][51];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #52
#[test]
fn nessie_2_52() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][52];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #53
#[test]
fn nessie_2_53() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][53];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #54
#[test]
fn nessie_2_54() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][54];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #55
#[test]
fn nessie_2_55() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][55];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #56
#[test]
fn nessie_2_56() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][56];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #57
#[test]
fn nessie_2_57() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][57];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #58
#[test]
fn nessie_2_58() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][58];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #59
#[test]
fn nessie_2_59() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][59];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #60
#[test]
fn nessie_2_60() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][60];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #61
#[test]
fn nessie_2_61() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][61];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #62
#[test]
fn nessie_2_62() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][62];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #63
#[test]
fn nessie_2_63() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][63];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #64
#[test]
fn nessie_2_64() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][64];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #65
#[test]
fn nessie_2_65() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][65];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #66
#[test]
fn nessie_2_66() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][66];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #67
#[test]
fn nessie_2_67() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][67];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #68
#[test]
fn nessie_2_68() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][68];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #69
#[test]
fn nessie_2_69() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][69];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #70
#[test]
fn nessie_2_70() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][70];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #71
#[test]
fn nessie_2_71() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][71];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #72
#[test]
fn nessie_2_72() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][72];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #73
#[test]
fn nessie_2_73() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][73];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #74
#[test]
fn nessie_2_74() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][74];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #75
#[test]
fn nessie_2_75() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][75];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #76
#[test]
fn nessie_2_76() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][76];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #77
#[test]
fn nessie_2_77() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][77];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #78
#[test]
fn nessie_2_78() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][78];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #79
#[test]
fn nessie_2_79() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][79];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #80
#[test]
fn nessie_2_80() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][80];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #81
#[test]
fn nessie_2_81() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][81];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #82
#[test]
fn nessie_2_82() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][82];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #83
#[test]
fn nessie_2_83() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][83];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #84
#[test]
fn nessie_2_84() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][84];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #85
#[test]
fn nessie_2_85() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][85];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #86
#[test]
fn nessie_2_86() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][86];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #87
#[test]
fn nessie_2_87() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][87];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #88
#[test]
fn nessie_2_88() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][88];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #89
#[test]
fn nessie_2_89() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][89];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #90
#[test]
fn nessie_2_90() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][90];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #91
#[test]
fn nessie_2_91() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][91];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #92
#[test]
fn nessie_2_92() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][92];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #93
#[test]
fn nessie_2_93() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][93];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #94
#[test]
fn nessie_2_94() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][94];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #95
#[test]
fn nessie_2_95() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][95];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #96
#[test]
fn nessie_2_96() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][96];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #97
#[test]
fn nessie_2_97() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][97];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #98
#[test]
fn nessie_2_98() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][98];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #99
#[test]
fn nessie_2_99() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][99];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #100
#[test]
fn nessie_2_100() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][100];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #101
#[test]
fn nessie_2_101() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][101];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #102
#[test]
fn nessie_2_102() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][102];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #103
#[test]
fn nessie_2_103() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][103];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #104
#[test]
fn nessie_2_104() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][104];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #105
#[test]
fn nessie_2_105() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][105];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #106
#[test]
fn nessie_2_106() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][106];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #107
#[test]
fn nessie_2_107() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][107];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #108
#[test]
fn nessie_2_108() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][108];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #109
#[test]
fn nessie_2_109() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][109];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #110
#[test]
fn nessie_2_110() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][110];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #111
#[test]
fn nessie_2_111() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][111];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #112
#[test]
fn nessie_2_112() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][112];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #113
#[test]
fn nessie_2_113() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][113];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #114
#[test]
fn nessie_2_114() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][114];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #115
#[test]
fn nessie_2_115() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][115];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #116
#[test]
fn nessie_2_116() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][116];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #117
#[test]
fn nessie_2_117() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][117];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #118
#[test]
fn nessie_2_118() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][118];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #119
#[test]
fn nessie_2_119() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][119];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #120
#[test]
fn nessie_2_120() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][120];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #121
#[test]
fn nessie_2_121() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][121];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #122
#[test]
fn nessie_2_122() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][122];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #123
#[test]
fn nessie_2_123() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][123];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #124
#[test]
fn nessie_2_124() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][124];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #125
#[test]
fn nessie_2_125() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][125];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #126
#[test]
fn nessie_2_126() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][126];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #127
#[test]
fn nessie_2_127() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][127];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #128
#[test]
fn nessie_2_128() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][128];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #129
#[test]
fn nessie_2_129() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][129];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #130
#[test]
fn nessie_2_130() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][130];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #131
#[test]
fn nessie_2_131() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][131];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #132
#[test]
fn nessie_2_132() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][132];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #133
#[test]
fn nessie_2_133() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][133];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #134
#[test]
fn nessie_2_134() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][134];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #135
#[test]
fn nessie_2_135() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][135];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #136
#[test]
fn nessie_2_136() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][136];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #137
#[test]
fn nessie_2_137() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][137];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #138
#[test]
fn nessie_2_138() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][138];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #139
#[test]
fn nessie_2_139() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][139];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #140
#[test]
fn nessie_2_140() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][140];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #141
#[test]
fn nessie_2_141() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][141];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #142
#[test]
fn nessie_2_142() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][142];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #143
#[test]
fn nessie_2_143() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][143];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #144
#[test]
fn nessie_2_144() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][144];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #145
#[test]
fn nessie_2_145() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][145];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #146
#[test]
fn nessie_2_146() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][146];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #147
#[test]
fn nessie_2_147() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][147];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #148
#[test]
fn nessie_2_148() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][148];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #149
#[test]
fn nessie_2_149() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][149];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #150
#[test]
fn nessie_2_150() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][150];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #151
#[test]
fn nessie_2_151() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][151];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #152
#[test]
fn nessie_2_152() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][152];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #153
#[test]
fn nessie_2_153() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][153];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #154
#[test]
fn nessie_2_154() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][154];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #155
#[test]
fn nessie_2_155() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][155];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #156
#[test]
fn nessie_2_156() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][156];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #157
#[test]
fn nessie_2_157() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][157];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #158
#[test]
fn nessie_2_158() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][158];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #159
#[test]
fn nessie_2_159() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][159];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #160
#[test]
fn nessie_2_160() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][160];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #161
#[test]
fn nessie_2_161() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][161];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #162
#[test]
fn nessie_2_162() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][162];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #163
#[test]
fn nessie_2_163() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][163];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #164
#[test]
fn nessie_2_164() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][164];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #165
#[test]
fn nessie_2_165() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][165];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #166
#[test]
fn nessie_2_166() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][166];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #167
#[test]
fn nessie_2_167() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][167];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #168
#[test]
fn nessie_2_168() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][168];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #169
#[test]
fn nessie_2_169() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][169];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #170
#[test]
fn nessie_2_170() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][170];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #171
#[test]
fn nessie_2_171() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][171];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #172
#[test]
fn nessie_2_172() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][172];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #173
#[test]
fn nessie_2_173() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][173];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #174
#[test]
fn nessie_2_174() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][174];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #175
#[test]
fn nessie_2_175() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][175];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #176
#[test]
fn nessie_2_176() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][176];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #177
#[test]
fn nessie_2_177() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][177];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #178
#[test]
fn nessie_2_178() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][178];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #179
#[test]
fn nessie_2_179() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][179];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #180
#[test]
fn nessie_2_180() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][180];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #181
#[test]
fn nessie_2_181() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][181];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #182
#[test]
fn nessie_2_182() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][182];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #183
#[test]
fn nessie_2_183() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][183];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #184
#[test]
fn nessie_2_184() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][184];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #185
#[test]
fn nessie_2_185() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][185];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #186
#[test]
fn nessie_2_186() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][186];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #187
#[test]
fn nessie_2_187() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][187];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #188
#[test]
fn nessie_2_188() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][188];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #189
#[test]
fn nessie_2_189() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][189];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #190
#[test]
fn nessie_2_190() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][190];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #191
#[test]
fn nessie_2_191() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][191];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #192
#[test]
fn nessie_2_192() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][192];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #193
#[test]
fn nessie_2_193() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][193];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #194
#[test]
fn nessie_2_194() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][194];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #195
#[test]
fn nessie_2_195() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][195];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #196
#[test]
fn nessie_2_196() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][196];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #197
#[test]
fn nessie_2_197() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][197];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #198
#[test]
fn nessie_2_198() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][198];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #199
#[test]
fn nessie_2_199() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][199];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #200
#[test]
fn nessie_2_200() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][200];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #201
#[test]
fn nessie_2_201() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][201];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #202
#[test]
fn nessie_2_202() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][202];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #203
#[test]
fn nessie_2_203() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][203];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #204
#[test]
fn nessie_2_204() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][204];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #205
#[test]
fn nessie_2_205() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][205];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #206
#[test]
fn nessie_2_206() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][206];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #207
#[test]
fn nessie_2_207() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][207];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #208
#[test]
fn nessie_2_208() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][208];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #209
#[test]
fn nessie_2_209() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][209];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #210
#[test]
fn nessie_2_210() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][210];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #211
#[test]
fn nessie_2_211() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][211];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #212
#[test]
fn nessie_2_212() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][212];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #213
#[test]
fn nessie_2_213() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][213];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #214
#[test]
fn nessie_2_214() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][214];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #215
#[test]
fn nessie_2_215() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][215];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #216
#[test]
fn nessie_2_216() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][216];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #217
#[test]
fn nessie_2_217() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][217];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #218
#[test]
fn nessie_2_218() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][218];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #219
#[test]
fn nessie_2_219() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][219];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #220
#[test]
fn nessie_2_220() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][220];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #221
#[test]
fn nessie_2_221() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][221];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #222
#[test]
fn nessie_2_222() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][222];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #223
#[test]
fn nessie_2_223() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][223];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #224
#[test]
fn nessie_2_224() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][224];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #225
#[test]
fn nessie_2_225() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][225];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #226
#[test]
fn nessie_2_226() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][226];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #227
#[test]
fn nessie_2_227() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][227];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #228
#[test]
fn nessie_2_228() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][228];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #229
#[test]
fn nessie_2_229() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][229];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #230
#[test]
fn nessie_2_230() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][230];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #231
#[test]
fn nessie_2_231() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][231];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #232
#[test]
fn nessie_2_232() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][232];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #233
#[test]
fn nessie_2_233() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][233];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #234
#[test]
fn nessie_2_234() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][234];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #235
#[test]
fn nessie_2_235() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][235];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #236
#[test]
fn nessie_2_236() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][236];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #237
#[test]
fn nessie_2_237() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][237];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #238
#[test]
fn nessie_2_238() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][238];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #239
#[test]
fn nessie_2_239() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][239];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #240
#[test]
fn nessie_2_240() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][240];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #241
#[test]
fn nessie_2_241() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][241];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #242
#[test]
fn nessie_2_242() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][242];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #243
#[test]
fn nessie_2_243() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][243];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #244
#[test]
fn nessie_2_244() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][244];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #245
#[test]
fn nessie_2_245() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][245];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #246
#[test]
fn nessie_2_246() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][246];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #247
#[test]
fn nessie_2_247() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][247];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #248
#[test]
fn nessie_2_248() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][248];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #249
#[test]
fn nessie_2_249() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][249];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #250
#[test]
fn nessie_2_250() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][250];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #251
#[test]
fn nessie_2_251() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][251];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #252
#[test]
fn nessie_2_252() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][252];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #253
#[test]
fn nessie_2_253() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][253];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #254
#[test]
fn nessie_2_254() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][254];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #255
#[test]
fn nessie_2_255() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[2][255];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #3 (2 vectors)
// vec #0
#[test]
fn nessie_3_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[3][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_3_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[3][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #4 (128 vectors)
// vec #0
#[test]
fn nessie_4_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_4_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #2
#[test]
fn nessie_4_2() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][2];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #3
#[test]
fn nessie_4_3() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][3];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #4
#[test]
fn nessie_4_4() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][4];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #5
#[test]
fn nessie_4_5() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][5];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #6
#[test]
fn nessie_4_6() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][6];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #7
#[test]
fn nessie_4_7() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][7];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #8
#[test]
fn nessie_4_8() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][8];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #9
#[test]
fn nessie_4_9() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][9];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #10
#[test]
fn nessie_4_10() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][10];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #11
#[test]
fn nessie_4_11() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][11];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #12
#[test]
fn nessie_4_12() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][12];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #13
#[test]
fn nessie_4_13() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][13];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #14
#[test]
fn nessie_4_14() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][14];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #15
#[test]
fn nessie_4_15() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][15];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #16
#[test]
fn nessie_4_16() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][16];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #17
#[test]
fn nessie_4_17() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][17];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #18
#[test]
fn nessie_4_18() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][18];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #19
#[test]
fn nessie_4_19() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][19];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #20
#[test]
fn nessie_4_20() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][20];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #21
#[test]
fn nessie_4_21() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][21];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #22
#[test]
fn nessie_4_22() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][22];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #23
#[test]
fn nessie_4_23() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][23];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #24
#[test]
fn nessie_4_24() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][24];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #25
#[test]
fn nessie_4_25() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][25];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #26
#[test]
fn nessie_4_26() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][26];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #27
#[test]
fn nessie_4_27() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][27];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #28
#[test]
fn nessie_4_28() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][28];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #29
#[test]
fn nessie_4_29() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][29];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #30
#[test]
fn nessie_4_30() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][30];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #31
#[test]
fn nessie_4_31() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][31];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #32
#[test]
fn nessie_4_32() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][32];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #33
#[test]
fn nessie_4_33() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][33];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #34
#[test]
fn nessie_4_34() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][34];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #35
#[test]
fn nessie_4_35() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][35];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #36
#[test]
fn nessie_4_36() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][36];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #37
#[test]
fn nessie_4_37() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][37];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #38
#[test]
fn nessie_4_38() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][38];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #39
#[test]
fn nessie_4_39() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][39];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #40
#[test]
fn nessie_4_40() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][40];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #41
#[test]
fn nessie_4_41() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][41];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #42
#[test]
fn nessie_4_42() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][42];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #43
#[test]
fn nessie_4_43() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][43];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #44
#[test]
fn nessie_4_44() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][44];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #45
#[test]
fn nessie_4_45() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][45];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #46
#[test]
fn nessie_4_46() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][46];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #47
#[test]
fn nessie_4_47() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][47];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #48
#[test]
fn nessie_4_48() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][48];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #49
#[test]
fn nessie_4_49() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][49];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #50
#[test]
fn nessie_4_50() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][50];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #51
#[test]
fn nessie_4_51() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][51];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #52
#[test]
fn nessie_4_52() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][52];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #53
#[test]
fn nessie_4_53() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][53];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #54
#[test]
fn nessie_4_54() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][54];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #55
#[test]
fn nessie_4_55() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][55];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #56
#[test]
fn nessie_4_56() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][56];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #57
#[test]
fn nessie_4_57() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][57];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #58
#[test]
fn nessie_4_58() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][58];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #59
#[test]
fn nessie_4_59() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][59];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #60
#[test]
fn nessie_4_60() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][60];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #61
#[test]
fn nessie_4_61() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][61];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #62
#[test]
fn nessie_4_62() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][62];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #63
#[test]
fn nessie_4_63() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][63];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #64
#[test]
fn nessie_4_64() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][64];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #65
#[test]
fn nessie_4_65() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][65];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #66
#[test]
fn nessie_4_66() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][66];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #67
#[test]
fn nessie_4_67() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][67];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #68
#[test]
fn nessie_4_68() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][68];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #69
#[test]
fn nessie_4_69() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][69];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #70
#[test]
fn nessie_4_70() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][70];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #71
#[test]
fn nessie_4_71() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][71];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #72
#[test]
fn nessie_4_72() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][72];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #73
#[test]
fn nessie_4_73() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][73];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #74
#[test]
fn nessie_4_74() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][74];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #75
#[test]
fn nessie_4_75() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][75];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #76
#[test]
fn nessie_4_76() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][76];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #77
#[test]
fn nessie_4_77() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][77];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #78
#[test]
fn nessie_4_78() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][78];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #79
#[test]
fn nessie_4_79() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][79];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #80
#[test]
fn nessie_4_80() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][80];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #81
#[test]
fn nessie_4_81() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][81];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #82
#[test]
fn nessie_4_82() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][82];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #83
#[test]
fn nessie_4_83() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][83];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #84
#[test]
fn nessie_4_84() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][84];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #85
#[test]
fn nessie_4_85() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][85];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #86
#[test]
fn nessie_4_86() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][86];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #87
#[test]
fn nessie_4_87() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][87];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #88
#[test]
fn nessie_4_88() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][88];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #89
#[test]
fn nessie_4_89() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][89];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #90
#[test]
fn nessie_4_90() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][90];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #91
#[test]
fn nessie_4_91() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][91];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #92
#[test]
fn nessie_4_92() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][92];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #93
#[test]
fn nessie_4_93() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][93];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #94
#[test]
fn nessie_4_94() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][94];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #95
#[test]
fn nessie_4_95() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][95];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #96
#[test]
fn nessie_4_96() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][96];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #97
#[test]
fn nessie_4_97() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][97];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #98
#[test]
fn nessie_4_98() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][98];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #99
#[test]
fn nessie_4_99() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][99];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #100
#[test]
fn nessie_4_100() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][100];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #101
#[test]
fn nessie_4_101() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][101];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #102
#[test]
fn nessie_4_102() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][102];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #103
#[test]
fn nessie_4_103() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][103];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #104
#[test]
fn nessie_4_104() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][104];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #105
#[test]
fn nessie_4_105() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][105];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #106
#[test]
fn nessie_4_106() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][106];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #107
#[test]
fn nessie_4_107() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][107];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #108
#[test]
fn nessie_4_108() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][108];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #109
#[test]
fn nessie_4_109() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][109];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #110
#[test]
fn nessie_4_110() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][110];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #111
#[test]
fn nessie_4_111() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][111];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #112
#[test]
fn nessie_4_112() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][112];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #113
#[test]
fn nessie_4_113() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][113];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #114
#[test]
fn nessie_4_114() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][114];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #115
#[test]
fn nessie_4_115() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][115];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #116
#[test]
fn nessie_4_116() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][116];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #117
#[test]
fn nessie_4_117() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][117];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #118
#[test]
fn nessie_4_118() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][118];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #119
#[test]
fn nessie_4_119() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][119];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #120
#[test]
fn nessie_4_120() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][120];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #121
#[test]
fn nessie_4_121() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][121];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #122
#[test]
fn nessie_4_122() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][122];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #123
#[test]
fn nessie_4_123() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][123];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #124
#[test]
fn nessie_4_124() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][124];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #125
#[test]
fn nessie_4_125() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][125];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #126
#[test]
fn nessie_4_126() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][126];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #127
#[test]
fn nessie_4_127() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[4][127];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #5 (64 vectors)
// vec #0
#[test]
fn nessie_5_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_5_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #2
#[test]
fn nessie_5_2() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][2];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #3
#[test]
fn nessie_5_3() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][3];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #4
#[test]
fn nessie_5_4() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][4];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #5
#[test]
fn nessie_5_5() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][5];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #6
#[test]
fn nessie_5_6() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][6];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #7
#[test]
fn nessie_5_7() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][7];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #8
#[test]
fn nessie_5_8() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][8];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #9
#[test]
fn nessie_5_9() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][9];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #10
#[test]
fn nessie_5_10() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][10];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #11
#[test]
fn nessie_5_11() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][11];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #12
#[test]
fn nessie_5_12() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][12];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #13
#[test]
fn nessie_5_13() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][13];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #14
#[test]
fn nessie_5_14() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][14];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #15
#[test]
fn nessie_5_15() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][15];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #16
#[test]
fn nessie_5_16() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][16];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #17
#[test]
fn nessie_5_17() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][17];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #18
#[test]
fn nessie_5_18() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][18];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #19
#[test]
fn nessie_5_19() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][19];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #20
#[test]
fn nessie_5_20() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][20];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #21
#[test]
fn nessie_5_21() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][21];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #22
#[test]
fn nessie_5_22() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][22];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #23
#[test]
fn nessie_5_23() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][23];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #24
#[test]
fn nessie_5_24() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][24];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #25
#[test]
fn nessie_5_25() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][25];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #26
#[test]
fn nessie_5_26() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][26];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #27
#[test]
fn nessie_5_27() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][27];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #28
#[test]
fn nessie_5_28() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][28];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #29
#[test]
fn nessie_5_29() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][29];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #30
#[test]
fn nessie_5_30() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][30];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #31
#[test]
fn nessie_5_31() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][31];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #32
#[test]
fn nessie_5_32() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][32];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #33
#[test]
fn nessie_5_33() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][33];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #34
#[test]
fn nessie_5_34() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][34];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #35
#[test]
fn nessie_5_35() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][35];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #36
#[test]
fn nessie_5_36() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][36];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #37
#[test]
fn nessie_5_37() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][37];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #38
#[test]
fn nessie_5_38() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][38];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #39
#[test]
fn nessie_5_39() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][39];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #40
#[test]
fn nessie_5_40() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][40];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #41
#[test]
fn nessie_5_41() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][41];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #42
#[test]
fn nessie_5_42() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][42];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #43
#[test]
fn nessie_5_43() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][43];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #44
#[test]
fn nessie_5_44() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][44];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #45
#[test]
fn nessie_5_45() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][45];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #46
#[test]
fn nessie_5_46() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][46];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #47
#[test]
fn nessie_5_47() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][47];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #48
#[test]
fn nessie_5_48() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][48];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #49
#[test]
fn nessie_5_49() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][49];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #50
#[test]
fn nessie_5_50() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][50];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #51
#[test]
fn nessie_5_51() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][51];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #52
#[test]
fn nessie_5_52() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][52];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #53
#[test]
fn nessie_5_53() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][53];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #54
#[test]
fn nessie_5_54() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][54];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #55
#[test]
fn nessie_5_55() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][55];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #56
#[test]
fn nessie_5_56() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][56];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #57
#[test]
fn nessie_5_57() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][57];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #58
#[test]
fn nessie_5_58() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][58];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #59
#[test]
fn nessie_5_59() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][59];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #60
#[test]
fn nessie_5_60() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][60];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #61
#[test]
fn nessie_5_61() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][61];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #62
#[test]
fn nessie_5_62() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][62];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #63
#[test]
fn nessie_5_63() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[5][63];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #6 (256 vectors)
// vec #0
#[test]
fn nessie_6_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_6_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #2
#[test]
fn nessie_6_2() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][2];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #3
#[test]
fn nessie_6_3() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][3];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #4
#[test]
fn nessie_6_4() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][4];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #5
#[test]
fn nessie_6_5() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][5];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #6
#[test]
fn nessie_6_6() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][6];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #7
#[test]
fn nessie_6_7() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][7];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #8
#[test]
fn nessie_6_8() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][8];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #9
#[test]
fn nessie_6_9() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][9];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #10
#[test]
fn nessie_6_10() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][10];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #11
#[test]
fn nessie_6_11() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][11];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #12
#[test]
fn nessie_6_12() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][12];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #13
#[test]
fn nessie_6_13() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][13];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #14
#[test]
fn nessie_6_14() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][14];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #15
#[test]
fn nessie_6_15() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][15];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #16
#[test]
fn nessie_6_16() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][16];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #17
#[test]
fn nessie_6_17() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][17];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #18
#[test]
fn nessie_6_18() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][18];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #19
#[test]
fn nessie_6_19() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][19];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #20
#[test]
fn nessie_6_20() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][20];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #21
#[test]
fn nessie_6_21() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][21];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #22
#[test]
fn nessie_6_22() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][22];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #23
#[test]
fn nessie_6_23() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][23];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #24
#[test]
fn nessie_6_24() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][24];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #25
#[test]
fn nessie_6_25() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][25];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #26
#[test]
fn nessie_6_26() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][26];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #27
#[test]
fn nessie_6_27() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][27];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #28
#[test]
fn nessie_6_28() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][28];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #29
#[test]
fn nessie_6_29() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][29];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #30
#[test]
fn nessie_6_30() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][30];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #31
#[test]
fn nessie_6_31() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][31];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #32
#[test]
fn nessie_6_32() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][32];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #33
#[test]
fn nessie_6_33() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][33];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #34
#[test]
fn nessie_6_34() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][34];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #35
#[test]
fn nessie_6_35() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][35];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #36
#[test]
fn nessie_6_36() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][36];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #37
#[test]
fn nessie_6_37() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][37];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #38
#[test]
fn nessie_6_38() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][38];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #39
#[test]
fn nessie_6_39() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][39];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #40
#[test]
fn nessie_6_40() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][40];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #41
#[test]
fn nessie_6_41() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][41];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #42
#[test]
fn nessie_6_42() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][42];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #43
#[test]
fn nessie_6_43() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][43];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #44
#[test]
fn nessie_6_44() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][44];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #45
#[test]
fn nessie_6_45() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][45];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #46
#[test]
fn nessie_6_46() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][46];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #47
#[test]
fn nessie_6_47() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][47];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #48
#[test]
fn nessie_6_48() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][48];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #49
#[test]
fn nessie_6_49() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][49];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #50
#[test]
fn nessie_6_50() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][50];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #51
#[test]
fn nessie_6_51() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][51];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #52
#[test]
fn nessie_6_52() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][52];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #53
#[test]
fn nessie_6_53() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][53];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #54
#[test]
fn nessie_6_54() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][54];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #55
#[test]
fn nessie_6_55() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][55];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #56
#[test]
fn nessie_6_56() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][56];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #57
#[test]
fn nessie_6_57() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][57];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #58
#[test]
fn nessie_6_58() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][58];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #59
#[test]
fn nessie_6_59() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][59];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #60
#[test]
fn nessie_6_60() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][60];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #61
#[test]
fn nessie_6_61() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][61];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #62
#[test]
fn nessie_6_62() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][62];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #63
#[test]
fn nessie_6_63() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][63];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #64
#[test]
fn nessie_6_64() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][64];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #65
#[test]
fn nessie_6_65() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][65];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #66
#[test]
fn nessie_6_66() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][66];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #67
#[test]
fn nessie_6_67() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][67];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #68
#[test]
fn nessie_6_68() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][68];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #69
#[test]
fn nessie_6_69() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][69];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #70
#[test]
fn nessie_6_70() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][70];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #71
#[test]
fn nessie_6_71() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][71];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #72
#[test]
fn nessie_6_72() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][72];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #73
#[test]
fn nessie_6_73() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][73];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #74
#[test]
fn nessie_6_74() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][74];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #75
#[test]
fn nessie_6_75() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][75];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #76
#[test]
fn nessie_6_76() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][76];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #77
#[test]
fn nessie_6_77() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][77];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #78
#[test]
fn nessie_6_78() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][78];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #79
#[test]
fn nessie_6_79() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][79];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #80
#[test]
fn nessie_6_80() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][80];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #81
#[test]
fn nessie_6_81() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][81];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #82
#[test]
fn nessie_6_82() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][82];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #83
#[test]
fn nessie_6_83() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][83];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #84
#[test]
fn nessie_6_84() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][84];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #85
#[test]
fn nessie_6_85() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][85];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #86
#[test]
fn nessie_6_86() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][86];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #87
#[test]
fn nessie_6_87() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][87];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #88
#[test]
fn nessie_6_88() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][88];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #89
#[test]
fn nessie_6_89() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][89];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #90
#[test]
fn nessie_6_90() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][90];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #91
#[test]
fn nessie_6_91() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][91];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #92
#[test]
fn nessie_6_92() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][92];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #93
#[test]
fn nessie_6_93() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][93];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #94
#[test]
fn nessie_6_94() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][94];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #95
#[test]
fn nessie_6_95() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][95];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #96
#[test]
fn nessie_6_96() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][96];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #97
#[test]
fn nessie_6_97() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][97];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #98
#[test]
fn nessie_6_98() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][98];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #99
#[test]
fn nessie_6_99() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][99];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #100
#[test]
fn nessie_6_100() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][100];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #101
#[test]
fn nessie_6_101() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][101];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #102
#[test]
fn nessie_6_102() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][102];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #103
#[test]
fn nessie_6_103() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][103];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #104
#[test]
fn nessie_6_104() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][104];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #105
#[test]
fn nessie_6_105() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][105];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #106
#[test]
fn nessie_6_106() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][106];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #107
#[test]
fn nessie_6_107() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][107];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #108
#[test]
fn nessie_6_108() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][108];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #109
#[test]
fn nessie_6_109() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][109];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #110
#[test]
fn nessie_6_110() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][110];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #111
#[test]
fn nessie_6_111() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][111];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #112
#[test]
fn nessie_6_112() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][112];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #113
#[test]
fn nessie_6_113() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][113];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #114
#[test]
fn nessie_6_114() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][114];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #115
#[test]
fn nessie_6_115() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][115];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #116
#[test]
fn nessie_6_116() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][116];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #117
#[test]
fn nessie_6_117() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][117];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #118
#[test]
fn nessie_6_118() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][118];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #119
#[test]
fn nessie_6_119() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][119];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #120
#[test]
fn nessie_6_120() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][120];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #121
#[test]
fn nessie_6_121() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][121];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #122
#[test]
fn nessie_6_122() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][122];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #123
#[test]
fn nessie_6_123() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][123];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #124
#[test]
fn nessie_6_124() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][124];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #125
#[test]
fn nessie_6_125() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][125];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #126
#[test]
fn nessie_6_126() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][126];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #127
#[test]
fn nessie_6_127() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][127];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #128
#[test]
fn nessie_6_128() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][128];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #129
#[test]
fn nessie_6_129() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][129];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #130
#[test]
fn nessie_6_130() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][130];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #131
#[test]
fn nessie_6_131() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][131];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #132
#[test]
fn nessie_6_132() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][132];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #133
#[test]
fn nessie_6_133() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][133];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #134
#[test]
fn nessie_6_134() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][134];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #135
#[test]
fn nessie_6_135() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][135];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #136
#[test]
fn nessie_6_136() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][136];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #137
#[test]
fn nessie_6_137() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][137];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #138
#[test]
fn nessie_6_138() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][138];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #139
#[test]
fn nessie_6_139() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][139];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #140
#[test]
fn nessie_6_140() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][140];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #141
#[test]
fn nessie_6_141() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][141];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #142
#[test]
fn nessie_6_142() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][142];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #143
#[test]
fn nessie_6_143() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][143];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #144
#[test]
fn nessie_6_144() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][144];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #145
#[test]
fn nessie_6_145() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][145];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #146
#[test]
fn nessie_6_146() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][146];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #147
#[test]
fn nessie_6_147() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][147];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #148
#[test]
fn nessie_6_148() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][148];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #149
#[test]
fn nessie_6_149() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][149];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #150
#[test]
fn nessie_6_150() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][150];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #151
#[test]
fn nessie_6_151() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][151];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #152
#[test]
fn nessie_6_152() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][152];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #153
#[test]
fn nessie_6_153() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][153];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #154
#[test]
fn nessie_6_154() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][154];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #155
#[test]
fn nessie_6_155() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][155];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #156
#[test]
fn nessie_6_156() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][156];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #157
#[test]
fn nessie_6_157() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][157];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #158
#[test]
fn nessie_6_158() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][158];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #159
#[test]
fn nessie_6_159() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][159];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #160
#[test]
fn nessie_6_160() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][160];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #161
#[test]
fn nessie_6_161() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][161];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #162
#[test]
fn nessie_6_162() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][162];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #163
#[test]
fn nessie_6_163() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][163];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #164
#[test]
fn nessie_6_164() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][164];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #165
#[test]
fn nessie_6_165() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][165];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #166
#[test]
fn nessie_6_166() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][166];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #167
#[test]
fn nessie_6_167() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][167];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #168
#[test]
fn nessie_6_168() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][168];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #169
#[test]
fn nessie_6_169() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][169];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #170
#[test]
fn nessie_6_170() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][170];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #171
#[test]
fn nessie_6_171() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][171];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #172
#[test]
fn nessie_6_172() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][172];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #173
#[test]
fn nessie_6_173() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][173];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #174
#[test]
fn nessie_6_174() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][174];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #175
#[test]
fn nessie_6_175() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][175];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #176
#[test]
fn nessie_6_176() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][176];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #177
#[test]
fn nessie_6_177() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][177];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #178
#[test]
fn nessie_6_178() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][178];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #179
#[test]
fn nessie_6_179() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][179];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #180
#[test]
fn nessie_6_180() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][180];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #181
#[test]
fn nessie_6_181() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][181];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #182
#[test]
fn nessie_6_182() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][182];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #183
#[test]
fn nessie_6_183() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][183];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #184
#[test]
fn nessie_6_184() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][184];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #185
#[test]
fn nessie_6_185() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][185];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #186
#[test]
fn nessie_6_186() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][186];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #187
#[test]
fn nessie_6_187() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][187];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #188
#[test]
fn nessie_6_188() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][188];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #189
#[test]
fn nessie_6_189() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][189];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #190
#[test]
fn nessie_6_190() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][190];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #191
#[test]
fn nessie_6_191() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][191];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #192
#[test]
fn nessie_6_192() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][192];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #193
#[test]
fn nessie_6_193() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][193];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #194
#[test]
fn nessie_6_194() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][194];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #195
#[test]
fn nessie_6_195() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][195];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #196
#[test]
fn nessie_6_196() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][196];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #197
#[test]
fn nessie_6_197() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][197];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #198
#[test]
fn nessie_6_198() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][198];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #199
#[test]
fn nessie_6_199() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][199];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #200
#[test]
fn nessie_6_200() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][200];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #201
#[test]
fn nessie_6_201() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][201];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #202
#[test]
fn nessie_6_202() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][202];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #203
#[test]
fn nessie_6_203() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][203];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #204
#[test]
fn nessie_6_204() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][204];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #205
#[test]
fn nessie_6_205() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][205];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #206
#[test]
fn nessie_6_206() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][206];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #207
#[test]
fn nessie_6_207() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][207];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #208
#[test]
fn nessie_6_208() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][208];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #209
#[test]
fn nessie_6_209() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][209];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #210
#[test]
fn nessie_6_210() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][210];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #211
#[test]
fn nessie_6_211() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][211];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #212
#[test]
fn nessie_6_212() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][212];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #213
#[test]
fn nessie_6_213() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][213];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #214
#[test]
fn nessie_6_214() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][214];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #215
#[test]
fn nessie_6_215() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][215];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #216
#[test]
fn nessie_6_216() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][216];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #217
#[test]
fn nessie_6_217() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][217];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #218
#[test]
fn nessie_6_218() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][218];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #219
#[test]
fn nessie_6_219() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][219];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #220
#[test]
fn nessie_6_220() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][220];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #221
#[test]
fn nessie_6_221() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][221];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #222
#[test]
fn nessie_6_222() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][222];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #223
#[test]
fn nessie_6_223() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][223];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #224
#[test]
fn nessie_6_224() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][224];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #225
#[test]
fn nessie_6_225() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][225];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #226
#[test]
fn nessie_6_226() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][226];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #227
#[test]
fn nessie_6_227() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][227];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #228
#[test]
fn nessie_6_228() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][228];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #229
#[test]
fn nessie_6_229() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][229];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #230
#[test]
fn nessie_6_230() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][230];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #231
#[test]
fn nessie_6_231() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][231];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #232
#[test]
fn nessie_6_232() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][232];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #233
#[test]
fn nessie_6_233() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][233];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #234
#[test]
fn nessie_6_234() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][234];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #235
#[test]
fn nessie_6_235() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][235];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #236
#[test]
fn nessie_6_236() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][236];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #237
#[test]
fn nessie_6_237() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][237];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #238
#[test]
fn nessie_6_238() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][238];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #239
#[test]
fn nessie_6_239() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][239];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #240
#[test]
fn nessie_6_240() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][240];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #241
#[test]
fn nessie_6_241() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][241];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #242
#[test]
fn nessie_6_242() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][242];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #243
#[test]
fn nessie_6_243() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][243];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #244
#[test]
fn nessie_6_244() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][244];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #245
#[test]
fn nessie_6_245() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][245];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #246
#[test]
fn nessie_6_246() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][246];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #247
#[test]
fn nessie_6_247() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][247];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #248
#[test]
fn nessie_6_248() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][248];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #249
#[test]
fn nessie_6_249() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][249];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #250
#[test]
fn nessie_6_250() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][250];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #251
#[test]
fn nessie_6_251() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][251];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #252
#[test]
fn nessie_6_252() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][252];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #253
#[test]
fn nessie_6_253() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][253];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #254
#[test]
fn nessie_6_254() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][254];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #255
#[test]
fn nessie_6_255() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[6][255];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #7 (2 vectors)
// vec #0
#[test]
fn nessie_7_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[7][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_7_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[7][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #0 (128 vectors)
// vec #0
#[test]
fn nessie_0_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_0_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #2
#[test]
fn nessie_0_2() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][2];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #3
#[test]
fn nessie_0_3() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][3];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #4
#[test]
fn nessie_0_4() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][4];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #5
#[test]
fn nessie_0_5() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][5];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #6
#[test]
fn nessie_0_6() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][6];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #7
#[test]
fn nessie_0_7() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][7];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #8
#[test]
fn nessie_0_8() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][8];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #9
#[test]
fn nessie_0_9() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][9];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #10
#[test]
fn nessie_0_10() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][10];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #11
#[test]
fn nessie_0_11() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][11];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #12
#[test]
fn nessie_0_12() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][12];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #13
#[test]
fn nessie_0_13() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][13];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #14
#[test]
fn nessie_0_14() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][14];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #15
#[test]
fn nessie_0_15() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][15];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #16
#[test]
fn nessie_0_16() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][16];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #17
#[test]
fn nessie_0_17() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][17];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #18
#[test]
fn nessie_0_18() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][18];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #19
#[test]
fn nessie_0_19() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][19];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #20
#[test]
fn nessie_0_20() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][20];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #21
#[test]
fn nessie_0_21() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][21];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #22
#[test]
fn nessie_0_22() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][22];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #23
#[test]
fn nessie_0_23() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][23];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #24
#[test]
fn nessie_0_24() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][24];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #25
#[test]
fn nessie_0_25() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][25];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #26
#[test]
fn nessie_0_26() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][26];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #27
#[test]
fn nessie_0_27() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][27];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #28
#[test]
fn nessie_0_28() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][28];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #29
#[test]
fn nessie_0_29() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][29];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #30
#[test]
fn nessie_0_30() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][30];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #31
#[test]
fn nessie_0_31() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][31];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #32
#[test]
fn nessie_0_32() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][32];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #33
#[test]
fn nessie_0_33() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][33];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #34
#[test]
fn nessie_0_34() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][34];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #35
#[test]
fn nessie_0_35() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][35];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #36
#[test]
fn nessie_0_36() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][36];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #37
#[test]
fn nessie_0_37() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][37];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #38
#[test]
fn nessie_0_38() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][38];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #39
#[test]
fn nessie_0_39() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][39];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #40
#[test]
fn nessie_0_40() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][40];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #41
#[test]
fn nessie_0_41() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][41];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #42
#[test]
fn nessie_0_42() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][42];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #43
#[test]
fn nessie_0_43() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][43];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #44
#[test]
fn nessie_0_44() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][44];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #45
#[test]
fn nessie_0_45() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][45];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #46
#[test]
fn nessie_0_46() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][46];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #47
#[test]
fn nessie_0_47() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][47];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #48
#[test]
fn nessie_0_48() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][48];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #49
#[test]
fn nessie_0_49() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][49];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #50
#[test]
fn nessie_0_50() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][50];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #51
#[test]
fn nessie_0_51() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][51];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #52
#[test]
fn nessie_0_52() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][52];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #53
#[test]
fn nessie_0_53() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][53];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #54
#[test]
fn nessie_0_54() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][54];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #55
#[test]
fn nessie_0_55() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][55];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #56
#[test]
fn nessie_0_56() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][56];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #57
#[test]
fn nessie_0_57() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][57];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #58
#[test]
fn nessie_0_58() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][58];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #59
#[test]
fn nessie_0_59() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][59];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #60
#[test]
fn nessie_0_60() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][60];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #61
#[test]
fn nessie_0_61() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][61];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #62
#[test]
fn nessie_0_62() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][62];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #63
#[test]
fn nessie_0_63() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][63];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #64
#[test]
fn nessie_0_64() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][64];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #65
#[test]
fn nessie_0_65() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][65];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #66
#[test]
fn nessie_0_66() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][66];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #67
#[test]
fn nessie_0_67() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][67];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #68
#[test]
fn nessie_0_68() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][68];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #69
#[test]
fn nessie_0_69() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][69];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #70
#[test]
fn nessie_0_70() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][70];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #71
#[test]
fn nessie_0_71() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][71];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #72
#[test]
fn nessie_0_72() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][72];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #73
#[test]
fn nessie_0_73() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][73];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #74
#[test]
fn nessie_0_74() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][74];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #75
#[test]
fn nessie_0_75() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][75];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #76
#[test]
fn nessie_0_76() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][76];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #77
#[test]
fn nessie_0_77() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][77];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #78
#[test]
fn nessie_0_78() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][78];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #79
#[test]
fn nessie_0_79() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][79];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #80
#[test]
fn nessie_0_80() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][80];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #81
#[test]
fn nessie_0_81() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][81];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #82
#[test]
fn nessie_0_82() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][82];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #83
#[test]
fn nessie_0_83() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][83];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #84
#[test]
fn nessie_0_84() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][84];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #85
#[test]
fn nessie_0_85() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][85];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #86
#[test]
fn nessie_0_86() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][86];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #87
#[test]
fn nessie_0_87() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][87];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #88
#[test]
fn nessie_0_88() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][88];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #89
#[test]
fn nessie_0_89() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][89];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #90
#[test]
fn nessie_0_90() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][90];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #91
#[test]
fn nessie_0_91() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][91];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #92
#[test]
fn nessie_0_92() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][92];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #93
#[test]
fn nessie_0_93() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][93];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #94
#[test]
fn nessie_0_94() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][94];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #95
#[test]
fn nessie_0_95() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][95];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #96
#[test]
fn nessie_0_96() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][96];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #97
#[test]
fn nessie_0_97() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][97];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #98
#[test]
fn nessie_0_98() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][98];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #99
#[test]
fn nessie_0_99() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][99];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #100
#[test]
fn nessie_0_100() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][100];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #101
#[test]
fn nessie_0_101() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][101];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #102
#[test]
fn nessie_0_102() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][102];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #103
#[test]
fn nessie_0_103() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][103];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #104
#[test]
fn nessie_0_104() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][104];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #105
#[test]
fn nessie_0_105() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][105];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #106
#[test]
fn nessie_0_106() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][106];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #107
#[test]
fn nessie_0_107() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][107];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #108
#[test]
fn nessie_0_108() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][108];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #109
#[test]
fn nessie_0_109() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][109];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #110
#[test]
fn nessie_0_110() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][110];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #111
#[test]
fn nessie_0_111() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][111];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #112
#[test]
fn nessie_0_112() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][112];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #113
#[test]
fn nessie_0_113() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][113];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #114
#[test]
fn nessie_0_114() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][114];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #115
#[test]
fn nessie_0_115() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][115];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #116
#[test]
fn nessie_0_116() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][116];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #117
#[test]
fn nessie_0_117() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][117];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #118
#[test]
fn nessie_0_118() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][118];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #119
#[test]
fn nessie_0_119() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][119];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #120
#[test]
fn nessie_0_120() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][120];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #121
#[test]
fn nessie_0_121() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][121];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #122
#[test]
fn nessie_0_122() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][122];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #123
#[test]
fn nessie_0_123() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][123];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #124
#[test]
fn nessie_0_124() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][124];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #125
#[test]
fn nessie_0_125() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][125];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #126
#[test]
fn nessie_0_126() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][126];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #127
#[test]
fn nessie_0_127() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[0][127];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// Set #1 (64 vectors)
// vec #0
#[test]
fn nessie_1_0() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][0];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #1
#[test]
fn nessie_1_1() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][1];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #2
#[test]
fn nessie_1_2() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][2];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #3
#[test]
fn nessie_1_3() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][3];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #4
#[test]
fn nessie_1_4() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][4];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #5
#[test]
fn nessie_1_5() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][5];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #6
#[test]
fn nessie_1_6() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][6];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #7
#[test]
fn nessie_1_7() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][7];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #8
#[test]
fn nessie_1_8() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][8];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #9
#[test]
fn nessie_1_9() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][9];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #10
#[test]
fn nessie_1_10() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][10];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #11
#[test]
fn nessie_1_11() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][11];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #12
#[test]
fn nessie_1_12() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][12];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #13
#[test]
fn nessie_1_13() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][13];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #14
#[test]
fn nessie_1_14() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][14];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #15
#[test]
fn nessie_1_15() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][15];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #16
#[test]
fn nessie_1_16() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][16];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #17
#[test]
fn nessie_1_17() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][17];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #18
#[test]
fn nessie_1_18() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][18];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #19
#[test]
fn nessie_1_19() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][19];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #20
#[test]
fn nessie_1_20() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][20];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #21
#[test]
fn nessie_1_21() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][21];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #22
#[test]
fn nessie_1_22() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][22];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #23
#[test]
fn nessie_1_23() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][23];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #24
#[test]
fn nessie_1_24() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][24];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #25
#[test]
fn nessie_1_25() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][25];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #26
#[test]
fn nessie_1_26() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][26];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #27
#[test]
fn nessie_1_27() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][27];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #28
#[test]
fn nessie_1_28() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][28];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #29
#[test]
fn nessie_1_29() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][29];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #30
#[test]
fn nessie_1_30() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][30];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #31
#[test]
fn nessie_1_31() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][31];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #32
#[test]
fn nessie_1_32() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][32];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #33
#[test]
fn nessie_1_33() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][33];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #34
#[test]
fn nessie_1_34() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][34];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #35
#[test]
fn nessie_1_35() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][35];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #36
#[test]
fn nessie_1_36() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][36];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #37
#[test]
fn nessie_1_37() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][37];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #38
#[test]
fn nessie_1_38() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][38];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #39
#[test]
fn nessie_1_39() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][39];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #40
#[test]
fn nessie_1_40() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][40];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #41
#[test]
fn nessie_1_41() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][41];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #42
#[test]
fn nessie_1_42() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][42];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #43
#[test]
fn nessie_1_43() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][43];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #44
#[test]
fn nessie_1_44() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][44];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #45
#[test]
fn nessie_1_45() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][45];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #46
#[test]
fn nessie_1_46() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][46];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #47
#[test]
fn nessie_1_47() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][47];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #48
#[test]
fn nessie_1_48() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][48];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #49
#[test]
fn nessie_1_49() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][49];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #50
#[test]
fn nessie_1_50() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][50];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #51
#[test]
fn nessie_1_51() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][51];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #52
#[test]
fn nessie_1_52() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][52];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #53
#[test]
fn nessie_1_53() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][53];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #54
#[test]
fn nessie_1_54() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][54];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #55
#[test]
fn nessie_1_55() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][55];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #56
#[test]
fn nessie_1_56() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][56];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #57
#[test]
fn nessie_1_57() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][57];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #58
#[test]
fn nessie_1_58() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][58];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #59
#[test]
fn nessie_1_59() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][59];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #60
#[test]
fn nessie_1_60() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][60];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #61
#[test]
fn nessie_1_61() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][61];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #62
#[test]
fn nessie_1_62() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][62];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}

// vec #63
#[test]
fn nessie_1_63() {
    let &(key_hex, plaintext_hex, ciphertext_hex) = &CASES[1][63];
    run_case::<RC5_32_12_16>(key_hex, plaintext_hex, ciphertext_hex);
}
