strange_word_impl!(w8bits, u16, typenum::U1, 0b1110111, 0b1011111);

use crate::strange_words::W24bit;
use w8bits::StrangeWord as W8bits;

use crate::{strange_words::StrangeArithmetics as A, traits::Arithmetics};

#[test]
fn u8_rots() {
    let rots: &[(u16, u16, u16)] = &[
        (0b0000_0001, 0, 0b0000_0001),
        (0b0000_0001, 1, 0b0000_0010),
        (0b0000_0001, 2, 0b0000_0100),
        (0b0000_0001, 3, 0b0000_1000),
        (0b0000_0001, 4, 0b0001_0000),
        (0b0000_0001, 5, 0b0010_0000),
        (0b0000_0001, 6, 0b0100_0000),
        (0b0000_0001, 7, 0b1000_0000),
        (0b0000_0001, 8, 0b0000_0001),
    ];
    for &(a, r, b) in rots {
        let a: W8bits = a.into();
        let r: W8bits = r.into();
        let b: W8bits = b.into();

        assert_eq!(
            A::rotl(&a, &r),
            b,
            "rotl({:08b}, {}) -> {:08b} [exp: {:08b}]",
            u16::from(a),
            r,
            u16::from(A::rotl(&a, &r)),
            u16::from(b)
        );
        assert_eq!(
            A::rotr(&b, &r),
            a,
            "rotr({:08b}, {}) -> {:08b} [exp: {:08b}]",
            u16::from(b),
            r,
            u16::from(A::rotl(&b, &r)),
            u16::from(a)
        );
    }
}

#[test]
fn u24_rots() {
    #[rustfmt::skip]
    let rots: &[(u32, u32, u32)] = &[
        (0b0000_0000_0000_0000_0000_0001,  0, 0b0000_0000_0000_0000_0000_0001),
        (0b0000_0000_0000_0000_0000_0001,  1, 0b0000_0000_0000_0000_0000_0010),
        (0b0000_0000_0000_0000_0000_0001,  2, 0b0000_0000_0000_0000_0000_0100),
        (0b0000_0000_0000_0000_0000_0001,  3, 0b0000_0000_0000_0000_0000_1000),
        (0b0000_0000_0000_0000_0000_0001,  4, 0b0000_0000_0000_0000_0001_0000),
        (0b0000_0000_0000_0000_0000_0001,  5, 0b0000_0000_0000_0000_0010_0000),
        (0b0000_0000_0000_0000_0000_0001,  6, 0b0000_0000_0000_0000_0100_0000),
        (0b0000_0000_0000_0000_0000_0001,  7, 0b0000_0000_0000_0000_1000_0000),
        (0b0000_0000_0000_0000_0000_0001,  8, 0b0000_0000_0000_0001_0000_0000),
        (0b0000_0000_0000_0000_0000_0001,  9, 0b0000_0000_0000_0010_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 10, 0b0000_0000_0000_0100_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 11, 0b0000_0000_0000_1000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 12, 0b0000_0000_0001_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 13, 0b0000_0000_0010_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 14, 0b0000_0000_0100_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 15, 0b0000_0000_1000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 16, 0b0000_0001_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 17, 0b0000_0010_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 18, 0b0000_0100_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 19, 0b0000_1000_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 20, 0b0001_0000_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 21, 0b0010_0000_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 22, 0b0100_0000_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 23, 0b1000_0000_0000_0000_0000_0000),
        (0b0000_0000_0000_0000_0000_0001, 24, 0b0000_0000_0000_0000_0000_0001),
    ];

    for &(a, r, b) in rots {
        let a: W24bit = a.into();
        let r: W24bit = r.into();
        let b: W24bit = b.into();

        eprintln!(
            "---\n{:024b}:{}\n{:024b}",
            u32::from(a),
            u32::from(r),
            u32::from(b)
        );

        assert_eq!(
            A::rotl(&a, &r),
            b,
            "rotl({:08b}, {}) -> {:08b} [exp: {:08b}]",
            u32::from(a),
            r,
            u32::from(A::rotl(&a, &r)),
            u32::from(b)
        );
        assert_eq!(
            A::rotr(&b, &r),
            a,
            "rotr({:08b}, {}) -> {:08b} [exp: {:08b}]",
            u32::from(b),
            r,
            u32::from(A::rotl(&b, &r)),
            u32::from(a)
        );
    }
}
